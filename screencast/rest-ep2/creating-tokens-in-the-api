<!DOCTYPE html>
<html lang="en">
<head prefix="og: http://ogp.me/ns#">
            <script src="https://cdn.optimizely.com/js/421270022.js"></script>
    
                    <script type="text/javascript">var _sf_startpt=(new Date()).getTime()</script>
        <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge"><script type="text/javascript">(window.NREUM||(NREUM={})).loader_config={xpid:"Vg4HUlBbGwAHVlFSDgM="};window.NREUM||(NREUM={}),__nr_require=function(t,e,n){function r(n){if(!e[n]){var o=e[n]={exports:{}};t[n][0].call(o.exports,function(e){var o=t[n][1][e];return r(o||e)},o,o.exports)}return e[n].exports}if("function"==typeof __nr_require)return __nr_require;for(var o=0;o<n.length;o++)r(n[o]);return r}({1:[function(t,e,n){function r(t){try{c.console&&console.log(t)}catch(e){}}var o,i=t("ee"),a=t(12),c={};try{o=localStorage.getItem("__nr_flags").split(","),console&&"function"==typeof console.log&&(c.console=!0,o.indexOf("dev")!==-1&&(c.dev=!0),o.indexOf("nr_dev")!==-1&&(c.nrDev=!0))}catch(s){}c.nrDev&&i.on("internal-error",function(t){r(t.stack)}),c.dev&&i.on("fn-err",function(t,e,n){r(n.stack)}),c.dev&&(r("NR AGENT IN DEVELOPMENT MODE"),r("flags: "+a(c,function(t,e){return t}).join(", ")))},{}],2:[function(t,e,n){function r(t,e,n,r,o){try{d?d-=1:i("err",[o||new UncaughtException(t,e,n)])}catch(c){try{i("ierr",[c,(new Date).getTime(),!0])}catch(s){}}return"function"==typeof f&&f.apply(this,a(arguments))}function UncaughtException(t,e,n){this.message=t||"Uncaught error with no additional information",this.sourceURL=e,this.line=n}function o(t){i("err",[t,(new Date).getTime()])}var i=t("handle"),a=t(13),c=t("ee"),s=t("loader"),f=window.onerror,u=!1,d=0;s.features.err=!0,t(1),window.onerror=r;try{throw new Error}catch(l){"stack"in l&&(t(5),t(4),"addEventListener"in window&&t(3),s.xhrWrappable&&t(6),u=!0)}c.on("fn-start",function(t,e,n){u&&(d+=1)}),c.on("fn-err",function(t,e,n){u&&(this.thrown=!0,o(n))}),c.on("fn-end",function(){u&&!this.thrown&&d>0&&(d-=1)}),c.on("internal-error",function(t){i("ierr",[t,(new Date).getTime(),!0])})},{}],3:[function(t,e,n){function r(t){for(var e=t;e&&!e.hasOwnProperty(u);)e=Object.getPrototypeOf(e);e&&o(e)}function o(t){c.inPlace(t,[u,d],"-",i)}function i(t,e){return t[1]}var a=t("ee").get("events"),c=t(14)(a,!0),s=t("gos"),f=XMLHttpRequest,u="addEventListener",d="removeEventListener";e.exports=a,"getPrototypeOf"in Object?(r(document),r(window),r(f.prototype)):f.prototype.hasOwnProperty(u)&&(o(window),o(f.prototype)),a.on(u+"-start",function(t,e){var n=t[1],r=s(n,"nr@wrapped",function(){function t(){if("function"==typeof n.handleEvent)return n.handleEvent.apply(n,arguments)}var e={object:t,"function":n}[typeof n];return e?c(e,"fn-",null,e.name||"anonymous"):n});this.wrapped=t[1]=r}),a.on(d+"-start",function(t){t[1]=this.wrapped||t[1]})},{}],4:[function(t,e,n){var r=t("ee").get("raf"),o=t(14)(r),i="equestAnimationFrame";e.exports=r,o.inPlace(window,["r"+i,"mozR"+i,"webkitR"+i,"msR"+i],"raf-"),r.on("raf-start",function(t){t[0]=o(t[0],"fn-")})},{}],5:[function(t,e,n){function r(t,e,n){t[0]=a(t[0],"fn-",null,n)}function o(t,e,n){this.method=n,this.timerDuration="number"==typeof t[1]?t[1]:0,t[0]=a(t[0],"fn-",this,n)}var i=t("ee").get("timer"),a=t(14)(i),c="setTimeout",s="setInterval",f="clearTimeout",u="-start",d="-";e.exports=i,a.inPlace(window,[c,"setImmediate"],c+d),a.inPlace(window,[s],s+d),a.inPlace(window,[f,"clearImmediate"],f+d),i.on(s+u,r),i.on(c+u,o)},{}],6:[function(t,e,n){function r(t,e){d.inPlace(e,["onreadystatechange"],"fn-",c)}function o(){var t=this,e=u.context(t);t.readyState>3&&!e.resolved&&(e.resolved=!0,u.emit("xhr-resolved",[],t)),d.inPlace(t,v,"fn-",c)}function i(t){y.push(t),h&&(w=-w,b.data=w)}function a(){for(var t=0;t<y.length;t++)r([],y[t]);y.length&&(y=[])}function c(t,e){return e}function s(t,e){for(var n in t)e[n]=t[n];return e}t(3);var f=t("ee"),u=f.get("xhr"),d=t(14)(u),l=NREUM.o,p=l.XHR,h=l.MO,m="readystatechange",v=["onload","onerror","onabort","onloadstart","onloadend","onprogress","ontimeout"],y=[];e.exports=u;var g=window.XMLHttpRequest=function(t){var e=new p(t);try{u.emit("new-xhr",[e],e),e.addEventListener(m,o,!1)}catch(n){try{u.emit("internal-error",[n])}catch(r){}}return e};if(s(p,g),g.prototype=p.prototype,d.inPlace(g.prototype,["open","send"],"-xhr-",c),u.on("send-xhr-start",function(t,e){r(t,e),i(e)}),u.on("open-xhr-start",r),h){var w=1,b=document.createTextNode(w);new h(a).observe(b,{characterData:!0})}else f.on("fn-end",function(t){t[0]&&t[0].type===m||a()})},{}],7:[function(t,e,n){function r(t){var e=this.params,n=this.metrics;if(!this.ended){this.ended=!0;for(var r=0;r<d;r++)t.removeEventListener(u[r],this.listener,!1);if(!e.aborted){if(n.duration=(new Date).getTime()-this.startTime,4===t.readyState){e.status=t.status;var i=o(t,this.lastSize);if(i&&(n.rxSize=i),this.sameOrigin){var a=t.getResponseHeader("X-NewRelic-App-Data");a&&(e.cat=a.split(", ").pop())}}else e.status=0;n.cbTime=this.cbTime,f.emit("xhr-done",[t],t),c("xhr",[e,n,this.startTime])}}}function o(t,e){var n=t.responseType;if("json"===n&&null!==e)return e;var r="arraybuffer"===n||"blob"===n||"json"===n?t.response:t.responseText;return h(r)}function i(t,e){var n=s(e),r=t.params;r.host=n.hostname+":"+n.port,r.pathname=n.pathname,t.sameOrigin=n.sameOrigin}var a=t("loader");if(a.xhrWrappable){var c=t("handle"),s=t(8),f=t("ee"),u=["load","error","abort","timeout"],d=u.length,l=t("id"),p=t(11),h=t(10),m=window.XMLHttpRequest;a.features.xhr=!0,t(6),f.on("new-xhr",function(t){var e=this;e.totalCbs=0,e.called=0,e.cbTime=0,e.end=r,e.ended=!1,e.xhrGuids={},e.lastSize=null,p&&(p>34||p<10)||window.opera||t.addEventListener("progress",function(t){e.lastSize=t.loaded},!1)}),f.on("open-xhr-start",function(t){this.params={method:t[0]},i(this,t[1]),this.metrics={}}),f.on("open-xhr-end",function(t,e){"loader_config"in NREUM&&"xpid"in NREUM.loader_config&&this.sameOrigin&&e.setRequestHeader("X-NewRelic-ID",NREUM.loader_config.xpid)}),f.on("send-xhr-start",function(t,e){var n=this.metrics,r=t[0],o=this;if(n&&r){var i=h(r);i&&(n.txSize=i)}this.startTime=(new Date).getTime(),this.listener=function(t){try{"abort"===t.type&&(o.params.aborted=!0),("load"!==t.type||o.called===o.totalCbs&&(o.onloadCalled||"function"!=typeof e.onload))&&o.end(e)}catch(n){try{f.emit("internal-error",[n])}catch(r){}}};for(var a=0;a<d;a++)e.addEventListener(u[a],this.listener,!1)}),f.on("xhr-cb-time",function(t,e,n){this.cbTime+=t,e?this.onloadCalled=!0:this.called+=1,this.called!==this.totalCbs||!this.onloadCalled&&"function"==typeof n.onload||this.end(n)}),f.on("xhr-load-added",function(t,e){var n=""+l(t)+!!e;this.xhrGuids&&!this.xhrGuids[n]&&(this.xhrGuids[n]=!0,this.totalCbs+=1)}),f.on("xhr-load-removed",function(t,e){var n=""+l(t)+!!e;this.xhrGuids&&this.xhrGuids[n]&&(delete this.xhrGuids[n],this.totalCbs-=1)}),f.on("addEventListener-end",function(t,e){e instanceof m&&"load"===t[0]&&f.emit("xhr-load-added",[t[1],t[2]],e)}),f.on("removeEventListener-end",function(t,e){e instanceof m&&"load"===t[0]&&f.emit("xhr-load-removed",[t[1],t[2]],e)}),f.on("fn-start",function(t,e,n){e instanceof m&&("onload"===n&&(this.onload=!0),("load"===(t[0]&&t[0].type)||this.onload)&&(this.xhrCbStart=(new Date).getTime()))}),f.on("fn-end",function(t,e){this.xhrCbStart&&f.emit("xhr-cb-time",[(new Date).getTime()-this.xhrCbStart,this.onload,e],e)})}},{}],8:[function(t,e,n){e.exports=function(t){var e=document.createElement("a"),n=window.location,r={};e.href=t,r.port=e.port;var o=e.href.split("://");!r.port&&o[1]&&(r.port=o[1].split("/")[0].split("@").pop().split(":")[1]),r.port&&"0"!==r.port||(r.port="https"===o[0]?"443":"80"),r.hostname=e.hostname||n.hostname,r.pathname=e.pathname,r.protocol=o[0],"/"!==r.pathname.charAt(0)&&(r.pathname="/"+r.pathname);var i=!e.protocol||":"===e.protocol||e.protocol===n.protocol,a=e.hostname===document.domain&&e.port===n.port;return r.sameOrigin=i&&(!e.hostname||a),r}},{}],9:[function(t,e,n){function r(){}function o(t,e,n){return function(){return i(t,[(new Date).getTime()].concat(c(arguments)),e?null:this,n),e?void 0:this}}var i=t("handle"),a=t(12),c=t(13),s=t("ee").get("tracer"),f=NREUM;"undefined"==typeof window.newrelic&&(newrelic=f);var u=["setPageViewName","setCustomAttribute","setErrorHandler","finished","addToTrace","inlineHit"],d="api-",l=d+"ixn-";a(u,function(t,e){f[e]=o(d+e,!0,"api")}),f.addPageAction=o(d+"addPageAction",!0),f.setCurrentRouteName=o(d+"routeName",!0),e.exports=newrelic,f.interaction=function(){return(new r).get()};var p=r.prototype={createTracer:function(t,e){var n={},r=this,o="function"==typeof e;return i(l+"tracer",[Date.now(),t,n],r),function(){if(s.emit((o?"":"no-")+"fn-start",[Date.now(),r,o],n),o)try{return e.apply(this,arguments)}finally{s.emit("fn-end",[Date.now()],n)}}}};a("setName,setAttribute,save,ignore,onEnd,getContext,end,get".split(","),function(t,e){p[e]=o(l+e)}),newrelic.noticeError=function(t){"string"==typeof t&&(t=new Error(t)),i("err",[t,(new Date).getTime()])}},{}],10:[function(t,e,n){e.exports=function(t){if("string"==typeof t&&t.length)return t.length;if("object"==typeof t){if("undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer&&t.byteLength)return t.byteLength;if("undefined"!=typeof Blob&&t instanceof Blob&&t.size)return t.size;if(!("undefined"!=typeof FormData&&t instanceof FormData))try{return JSON.stringify(t).length}catch(e){return}}}},{}],11:[function(t,e,n){var r=0,o=navigator.userAgent.match(/Firefox[\/\s](\d+\.\d+)/);o&&(r=+o[1]),e.exports=r},{}],12:[function(t,e,n){function r(t,e){var n=[],r="",i=0;for(r in t)o.call(t,r)&&(n[i]=e(r,t[r]),i+=1);return n}var o=Object.prototype.hasOwnProperty;e.exports=r},{}],13:[function(t,e,n){function r(t,e,n){e||(e=0),"undefined"==typeof n&&(n=t?t.length:0);for(var r=-1,o=n-e||0,i=Array(o<0?0:o);++r<o;)i[r]=t[e+r];return i}e.exports=r},{}],14:[function(t,e,n){function r(t){return!(t&&t instanceof Function&&t.apply&&!t[a])}var o=t("ee"),i=t(13),a="nr@original",c=Object.prototype.hasOwnProperty,s=!1;e.exports=function(t,e){function n(t,e,n,o){function nrWrapper(){var r,a,c,s;try{a=this,r=i(arguments),c="function"==typeof n?n(r,a):n||{}}catch(f){l([f,"",[r,a,o],c])}u(e+"start",[r,a,o],c);try{return s=t.apply(a,r)}catch(d){throw u(e+"err",[r,a,d],c),d}finally{u(e+"end",[r,a,s],c)}}return r(t)?t:(e||(e=""),nrWrapper[a]=t,d(t,nrWrapper),nrWrapper)}function f(t,e,o,i){o||(o="");var a,c,s,f="-"===o.charAt(0);for(s=0;s<e.length;s++)c=e[s],a=t[c],r(a)||(t[c]=n(a,f?c+o:o,i,c))}function u(n,r,o){if(!s||e){var i=s;s=!0;try{t.emit(n,r,o)}catch(a){l([a,n,r,o])}s=i}}function d(t,e){if(Object.defineProperty&&Object.keys)try{var n=Object.keys(t);return n.forEach(function(n){Object.defineProperty(e,n,{get:function(){return t[n]},set:function(e){return t[n]=e,e}})}),e}catch(r){l([r])}for(var o in t)c.call(t,o)&&(e[o]=t[o]);return e}function l(e){try{t.emit("internal-error",e)}catch(n){}}return t||(t=o),n.inPlace=f,n.flag=a,n}},{}],ee:[function(t,e,n){function r(){}function o(t){function e(t){return t&&t instanceof r?t:t?s(t,c,i):i()}function n(n,r,o){if(!l.aborted){t&&t(n,r,o);for(var i=e(o),a=h(n),c=a.length,s=0;s<c;s++)a[s].apply(i,r);var f=u[g[n]];return f&&f.push([w,n,r,i]),i}}function p(t,e){y[t]=h(t).concat(e)}function h(t){return y[t]||[]}function m(t){return d[t]=d[t]||o(n)}function v(t,e){f(t,function(t,n){e=e||"feature",g[n]=e,e in u||(u[e]=[])})}var y={},g={},w={on:p,emit:n,get:m,listeners:h,context:e,buffer:v,abort:a,aborted:!1};return w}function i(){return new r}function a(){(u.api||u.feature)&&(l.aborted=!0,u=l.backlog={})}var c="nr@context",s=t("gos"),f=t(12),u={},d={},l=e.exports=o();l.backlog=u},{}],gos:[function(t,e,n){function r(t,e,n){if(o.call(t,e))return t[e];var r=n();if(Object.defineProperty&&Object.keys)try{return Object.defineProperty(t,e,{value:r,writable:!0,enumerable:!1}),r}catch(i){}return t[e]=r,r}var o=Object.prototype.hasOwnProperty;e.exports=r},{}],handle:[function(t,e,n){function r(t,e,n,r){o.buffer([t],r),o.emit(t,e,n)}var o=t("ee").get("handle");e.exports=r,r.ee=o},{}],id:[function(t,e,n){function r(t){var e=typeof t;return!t||"object"!==e&&"function"!==e?-1:t===window?0:a(t,i,function(){return o++})}var o=1,i="nr@id",a=t("gos");e.exports=r},{}],loader:[function(t,e,n){function r(){if(!b++){var t=w.info=NREUM.info,e=d.getElementsByTagName("script")[0];if(setTimeout(f.abort,3e4),!(t&&t.licenseKey&&t.applicationID&&e))return f.abort();s(y,function(e,n){t[e]||(t[e]=n)}),c("mark",["onload",a()],null,"api");var n=d.createElement("script");n.src="https://"+t.agent,e.parentNode.insertBefore(n,e)}}function o(){"complete"===d.readyState&&i()}function i(){c("mark",["domContent",a()],null,"api")}function a(){return(new Date).getTime()}var c=t("handle"),s=t(12),f=t("ee"),u=window,d=u.document,l="addEventListener",p="attachEvent",h=u.XMLHttpRequest,m=h&&h.prototype;NREUM.o={ST:setTimeout,CT:clearTimeout,XHR:h,REQ:u.Request,EV:u.Event,PR:u.Promise,MO:u.MutationObserver},t(9);var v=""+location,y={beacon:"bam.nr-data.net",errorBeacon:"bam.nr-data.net",agent:"js-agent.newrelic.com/nr-998.min.js"},g=h&&m&&m[l]&&!/CriOS/.test(navigator.userAgent),w=e.exports={offset:a(),origin:v,features:{},xhrWrappable:g};d[l]?(d[l]("DOMContentLoaded",i,!1),u[l]("load",r,!1)):(d[p]("onreadystatechange",o),u[p]("onload",r)),c("mark",["firstbyte",a()],null,"api");var b=0},{}]},{},["loader",2,7]);</script>
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <title>Creating Token Resources in the API > RESTful APIs in the Real World Course 2 | KnpUniversity</title>

                    <link href="../../builds/main-db6835bf19d99bcc09032789f3bd39e4.css" rel="stylesheet">

        <link href='https://fonts.googleapis.com/css?family=Rokkitt' rel='stylesheet' type='text/css'>
        <link href='https://fonts.googleapis.com/css?family=Open+Sans:400,700' rel='stylesheet' type='text/css'>
        <link href='https://fonts.googleapis.com/css?family=Cedarville+Cursive' rel='stylesheet' type='text/css'>
    

    <link rel="stylesheet" href="http://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.9.1/styles/tomorrow-night.min.css">
<link rel="stylesheet" href="http://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.0.0/styles/tomorrow-night.min.css">


        <link rel="stylesheet" href="../../builds/code_block_styles-2d783e385d9dbb1ef88d9053d1b8d675.css">



    <link href="../../builds/video-6b5fa6dfb768239b226d39d08bd4867e.css" rel="stylesheet">

                        <script src="../../bundles/fosjsrouting/js/router.js"></script>

        <script src="../../builds/main-1dfa89b76a105f9c2d98.js"></script>
        <script src="../../js/routing?callback=fos.Router.setData"></script>
            

    <script>
        // video settings
        window.video = {
            isCourseChapterPaid: false,
            courseChapterId: 38772
        };

                window.video.nextDetails = {
            'type': 'video',
            'title': 'Up Next: Reuse\x20and\x20Consistency <i class="fa fa-play"></i>',
            'url': '/screencast/rest-ep2/reuse-consistency#play'
        };
            </script>

    <script src="../../builds/video-1dfa89b76a105f9c2d98.js"></script>
    <script type="text/javascript">
        jQuery(document).ready(function() {
            var hashValue = window.location.hash.substr(1);
            if (hashValue.substr(0, 7) == 'comment') {
                // this is a #comment link - open up the comment tab!
                $('.nav-tabs a[href="#tab-comment"]').click();
            }
        });
    </script>

    <link rel="alternate" type="application/rss+xml" title="Blog feed with technical articles around PHP and screencast and tutorial updates from KnpUniversity.com" href="http://feeds.feedburner.com/knpuniversity" />

    <meta name="description" content="Making RESTful APIs is hard, really hard. There are a lot of concepts
to know - resources, representations, HTTP methods, status codes, etc.

[Course 1](http://knpuniversity.com/screencast/rest) got us really comfortable
with all the terminology. So in episode 2, we&#039;re attacking the *hard*
stuff:

* Using a serializer
* Token Authentication System (Silex&#039;s security system)
* Hypermedia versus media
* The HAL hypermedia type
* The HATEOAS PHP library
* The HAL Browser
* Embedding resources (versus adding links)
* Tricks with Behat for testing API&#039;s
* Pagination and filtering
* A lot of other pieces in between!

This stuff is not easy. But if you make it through, you&#039;ll be armed to
attack whatever API need you have. And for documenting your API, see
[Course 3](http://knpuniversity.com/screencast/rest-ep3)
">

    <meta property="og:site_name" content="KnpUniversity - PHP and Symfony Video Tutorial Screencasts">
    <meta name="twitter:site" content="@KnpUniversity"><link rel="shortcut icon" href="../../assets/images/favicon.ico">
    <link rel="icon" type="image/png" href="../../assets/images/favicon.png">

    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
    <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->    <meta property="og:title" content="Creating Token Resources in the API">
<meta property="og:description" content="Making RESTful APIs is hard, really hard. There are a lot of concepts
to know - resources, representations, HTTP methods, status codes, etc">
<meta property="og:url" content="http://knpuniversity.com/screencast/rest-ep2/creating-tokens-in-the-api">
    <meta property="og:image" content="http://knpuniversity.com/imagine/course_video_poster_large/uploads/screencast/rest-ep2:3045e08e8fa65ec0d207e42cdf47bb2f02a3e490/rest2.png">

<meta name="twitter:card" content="summary">


                            
    </head>
<body data-user-id="" >
<nav class="navbar navbar-inverse nav-margin navbar-learning-layout">
    <div class="container">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle toggle-button collapsed" data-toggle="collapse" data-target="#js-navbar" aria-expanded="false" aria-controls="js-navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a href="../../logout" class="navbar-brand">
                <span class="knp-color-blue">Knp</span>
                <span class="knp-color-white">University</span>
            </a>
        </div>
        <form class="navbar-form navbar-left navbar-form-border" role="search" method="GET" action="http://knpuniversity.com/search">
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Search Tutorials" value="" name="q">

                <div class="input-group-btn">
                    <button class="btn btn-default" type="submit">
                        <i class="fa fa-search"></i>
                    </button>
                </div>
            </div>
        </form>
        <div id="js-navbar" class="collapse-fix collapse navbar-right navbar-collapse">
            

<ul class="nav navbar-nav nav-narrowerOnSmall">
            <li><a href="../../checkout/subscription/team_yearly/5" title="Cart"><i class="fa fa-shopping-cart"></i></a></li>
        <li class="dropdown"><a href="creating-tokens-in-the-api#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Tutorials <i class="fa fa-angle-down"></i></a>
        <ul class="dropdown-menu">
          <li><a href="../../tracks.1">Tracks</a></li>
          <li><a href="../../courses/all">All Courses</a></li>
        </ul>
    </li>
            <li><a href="../../pricing.1">Pricing</a></li>
        <li><a href="../../training">Training</a></li>
                <li class="visible-xs"><a href="../../logout">My Profile</a></li>
        <li class="visible-xs"><a href="../../logout">Sign Out</a></li>

            <li><a href="../../login.1">Log In</a></li>
        <li class="btn btn-sm btn-warning signup-btn"><a class="signup" href="../../signup/index.html">Sign Up</a></li>
    </ul>

        </div>
    </div>
</nav>


    




<div class="table-contents-container">
  <div class="container expandList" id="js-chapter-list">
      <button class="table-contents-container-button js-expand-list" data-target="js-chapter-list" title="Chapter List">
          <i class="fa fa-bars"></i>
                        9.
                            Creating Token Resources in the...
                </button>
      <div class="expandList-body">
          <div class="expandList-bodyInner">
              <h3 class="expandList-header">
                  <a class="course-title-expand" href="resume">RESTful APIs in the Real World Course 2</a>
              </h3>

                                <div class="watched-tut-progress-container watched-tut-progress-container-overview">
        <div class="watched-tut-progress-overview" style="width: 0%; margin-right: 100%;" title="0% complete"><span class="profile-progress-title">0%</span></div>
    </div>


              
              <div class="expand-chapter-list">
                      
    
    <!-- Table of contents -->
    <div class="chapter-list">
        <ul class="list-unstyled">
            
                
                                <li class="title chapter-list-item ">
            <a href="serializer" class="">
                <div class="row">
                    <div class="col-xs-9">
                                                1.
                        The Serializer: Swiss-Army Knife of APIs
                                            </div>

                                    <div class="col-xs-3 text-right">
                        <span> 7:58</span>
                    </div>
                                </div>
            </a>
            <div class="row">
                <div class="col-xs-12">
                                    </div>
            </div>
        </li>


            
                
                                <li class="title chapter-list-item ">
            <a href="serializer-configuration" class="">
                <div class="row">
                    <div class="col-xs-9">
                                                2.
                        Serializer Configuration (SerializationContext)
                                            </div>

                                    <div class="col-xs-3 text-right">
                        <span> 4:46</span>
                    </div>
                                </div>
            </a>
            <div class="row">
                <div class="col-xs-12">
                                    </div>
            </div>
        </li>


            
                
                                <li class="title chapter-list-item ">
            <a href="serializer-annotations" class="">
                <div class="row">
                    <div class="col-xs-9">
                                                3.
                        Serializer Annotations
                                            </div>

                                    <div class="col-xs-3 text-right">
                        <span> 2:59</span>
                    </div>
                                </div>
            </a>
            <div class="row">
                <div class="col-xs-12">
                                    </div>
            </div>
        </li>


            
                
                                <li class="title chapter-list-item ">
            <a href="requiring-authentication" class="">
                <div class="row">
                    <div class="col-xs-9">
                                                4.
                        Requiring Authentication
                                            </div>

                                    <div class="col-xs-3 text-right">
                        <span> 6:32</span>
                    </div>
                                </div>
            </a>
            <div class="row">
                <div class="col-xs-12">
                                    </div>
            </div>
        </li>


            
                
                                <li class="title chapter-list-item ">
            <a href="authentication-via-token" class="">
                <div class="row">
                    <div class="col-xs-9">
                                                5.
                        Authorization via a Token
                                            </div>

                                    <div class="col-xs-3 text-right">
                        <span> 7:13</span>
                    </div>
                                </div>
            </a>
            <div class="row">
                <div class="col-xs-12">
                                    </div>
            </div>
        </li>


            
                
                                <li class="title chapter-list-item ">
            <a href="securing-more-endpoints" class="">
                <div class="row">
                    <div class="col-xs-9">
                                                6.
                        Securing More Endpoints
                                            </div>

                                    <div class="col-xs-3 text-right">
                        <span> 3:05</span>
                    </div>
                                </div>
            </a>
            <div class="row">
                <div class="col-xs-12">
                                    </div>
            </div>
        </li>


            
                
                                <li class="title chapter-list-item ">
            <a href="authentication-error-format" class="">
                <div class="row">
                    <div class="col-xs-9">
                                                7.
                        Authentication Error Format
                                            </div>

                                    <div class="col-xs-3 text-right">
                        <span> 7:08</span>
                    </div>
                                </div>
            </a>
            <div class="row">
                <div class="col-xs-12">
                                    </div>
            </div>
        </li>


            
                
                                <li class="title chapter-list-item ">
            <a href="centralizing-error-response-creation" class="">
                <div class="row">
                    <div class="col-xs-9">
                                                8.
                        Centralizing Error Response Creation
                                            </div>

                                    <div class="col-xs-3 text-right">
                        <span> 4:25</span>
                    </div>
                                </div>
            </a>
            <div class="row">
                <div class="col-xs-12">
                                    </div>
            </div>
        </li>


            
                
                                <li class="title chapter-list-item chapter-list-item-active">
            <a href="creating-tokens-in-the-api" class="">
                <div class="row">
                    <div class="col-xs-9">
                                                9.
                        Creating Token Resources in the API
                                            </div>

                                    <div class="col-xs-3 text-right">
                        <span> 10:14</span>
                    </div>
                                </div>
            </a>
            <div class="row">
                <div class="col-xs-12">
                                    </div>
            </div>
        </li>


            
                
                                <li class="title chapter-list-item ">
            <a href="reuse-consistency" class="">
                <div class="row">
                    <div class="col-xs-9">
                                                10.
                        Reuse and Consistency
                                            </div>

                                    <div class="col-xs-3 text-right">
                        <span> 5:22</span>
                    </div>
                                </div>
            </a>
            <div class="row">
                <div class="col-xs-12">
                                    </div>
            </div>
        </li>


            
                
                                <li class="title chapter-list-item ">
            <a href="token-validation" class="">
                <div class="row">
                    <div class="col-xs-9">
                                                11.
                        Validate that Token Resource
                                            </div>

                                    <div class="col-xs-3 text-right">
                        <span> 3:51</span>
                    </div>
                                </div>
            </a>
            <div class="row">
                <div class="col-xs-12">
                                    </div>
            </div>
        </li>


            
                
                                <li class="title chapter-list-item ">
            <a href="battle-resource-feature" class="">
                <div class="row">
                    <div class="col-xs-9">
                                                12.
                        New Battle Resource (the Scenario)
                                            </div>

                                    <div class="col-xs-3 text-right">
                        <span> 5:06</span>
                    </div>
                                </div>
            </a>
            <div class="row">
                <div class="col-xs-12">
                                    </div>
            </div>
        </li>


            
                
                                <li class="title chapter-list-item ">
            <a href="battle-resource-new" class="">
                <div class="row">
                    <div class="col-xs-9">
                                                13.
                        Start (Create) an Epic Battle (Resource)
                                            </div>

                                    <div class="col-xs-3 text-right">
                        <span> 5:42</span>
                    </div>
                                </div>
            </a>
            <div class="row">
                <div class="col-xs-12">
                                    </div>
            </div>
        </li>


            
                
                                <li class="title chapter-list-item ">
            <a href="get-one-battle" class="">
                <div class="row">
                    <div class="col-xs-9">
                                                14.
                        GET Your (One) Battle On
                                            </div>

                                    <div class="col-xs-3 text-right">
                        <span> 4:47</span>
                    </div>
                                </div>
            </a>
            <div class="row">
                <div class="col-xs-12">
                                    </div>
            </div>
        </li>


            
                
                                <li class="title chapter-list-item ">
            <a href="link-battle-programmer" class="">
                <div class="row">
                    <div class="col-xs-9">
                                                15.
                        Battles and Programmer - Link them!
                                            </div>

                                    <div class="col-xs-3 text-right">
                        <span> 3:42</span>
                    </div>
                                </div>
            </a>
            <div class="row">
                <div class="col-xs-12">
                                    </div>
            </div>
        </li>


            
                
                                <li class="title chapter-list-item ">
            <a href="hateoas-installation" class="">
                <div class="row">
                    <div class="col-xs-9">
                                                16.
                        I &lt;3 HATEOAS Installation
                                            </div>

                                    <div class="col-xs-3 text-right">
                        <span> 7:22</span>
                    </div>
                                </div>
            </a>
            <div class="row">
                <div class="col-xs-12">
                                    </div>
            </div>
        </li>


            
                
                                <li class="title chapter-list-item ">
            <a href="hateoas-router" class="">
                <div class="row">
                    <div class="col-xs-9">
                                                17.
                        HATEOAS Loves Routers
                                            </div>

                                    <div class="col-xs-3 text-right">
                        <span> 3:12</span>
                    </div>
                                </div>
            </a>
            <div class="row">
                <div class="col-xs-12">
                                    </div>
            </div>
        </li>


            
                
                                <li class="title chapter-list-item ">
            <a href="hateoas-linking" class="">
                <div class="row">
                    <div class="col-xs-9">
                                                18.
                        Adding Real Links with HATEOAS
                                            </div>

                                    <div class="col-xs-3 text-right">
                        <span> 3:08</span>
                    </div>
                                </div>
            </a>
            <div class="row">
                <div class="col-xs-12">
                                    </div>
            </div>
        </li>


            
                
                                <li class="title chapter-list-item ">
            <a href="hypermedia-media" class="">
                <div class="row">
                    <div class="col-xs-9">
                                                19.
                        Hypermedia vs. Media (Buzzwords!)
                                            </div>

                                    <div class="col-xs-3 text-right">
                        <span> 4:50</span>
                    </div>
                                </div>
            </a>
            <div class="row">
                <div class="col-xs-12">
                                    </div>
            </div>
        </li>


            
                
                                <li class="title chapter-list-item ">
            <a href="embedded-resources" class="">
                <div class="row">
                    <div class="col-xs-9">
                                                20.
                        We can Embed Resources Too
                                            </div>

                                    <div class="col-xs-3 text-right">
                        <span> 2:58</span>
                    </div>
                                </div>
            </a>
            <div class="row">
                <div class="col-xs-12">
                                    </div>
            </div>
        </li>


            
                
                                <li class="title chapter-list-item ">
            <a href="hal-browser" class="">
                <div class="row">
                    <div class="col-xs-9">
                                                21.
                        Fun with the HAL Browser!
                                            </div>

                                    <div class="col-xs-3 text-right">
                        <span> 2:40</span>
                    </div>
                                </div>
            </a>
            <div class="row">
                <div class="col-xs-12">
                                    </div>
            </div>
        </li>


            
                
                                <li class="title chapter-list-item ">
            <a href="hal-collection" class="">
                <div class="row">
                    <div class="col-xs-9">
                                                22.
                        Collections: The HAL Way
                                            </div>

                                    <div class="col-xs-3 text-right">
                        <span> 4:25</span>
                    </div>
                                </div>
            </a>
            <div class="row">
                <div class="col-xs-12">
                                    </div>
            </div>
        </li>


            
                
                                <li class="title chapter-list-item ">
            <a href="link-all-the-resources" class="">
                <div class="row">
                    <div class="col-xs-9">
                                                23.
                        Link to a Subordinate Resource!
                                            </div>

                                    <div class="col-xs-3 text-right">
                        <span> 7:23</span>
                    </div>
                                </div>
            </a>
            <div class="row">
                <div class="col-xs-12">
                                    </div>
            </div>
        </li>


            
                
                                <li class="title chapter-list-item ">
            <a href="api-homepage" class="">
                <div class="row">
                    <div class="col-xs-9">
                                                24.
                        A Homepage for your API?
                                            </div>

                                    <div class="col-xs-3 text-right">
                        <span> 6:10</span>
                    </div>
                                </div>
            </a>
            <div class="row">
                <div class="col-xs-12">
                                    </div>
            </div>
        </li>


            
                
                                <li class="title chapter-list-item ">
            <a href="pagination" class="">
                <div class="row">
                    <div class="col-xs-9">
                                                25.
                        API Pagination Done Easily
                                            </div>

                                    <div class="col-xs-3 text-right">
                        <span> 8:48</span>
                    </div>
                                </div>
            </a>
            <div class="row">
                <div class="col-xs-12">
                                    </div>
            </div>
        </li>


            
                
                                <li class="title chapter-list-item ">
            <a href="filtering" class="">
                <div class="row">
                    <div class="col-xs-9">
                                                26.
                        Filtering and HATEOAS (The Buzzword)
                                            </div>

                                    <div class="col-xs-3 text-right">
                        <span> 4:40</span>
                    </div>
                                </div>
            </a>
            <div class="row">
                <div class="col-xs-12">
                                    </div>
            </div>
        </li>


                    </ul>
    </div>

    
              </div>
          </div>
      </div>
  </div>
  <div>
                <a href="../../pricing/rest-ep2" class="btn btn-success pull-right-md download-buy-buttons">Buy <span class="hidden-xs">Access to Course</span></a>
              </div>
</div>


        <div class="container">
        <div class="row">
            <div class="col-xs-12 col-sm-9 col-lg-10">
                <h1 class="account-header account-header-low-margin-top">Creating Token Resources in the API</h1>
                
                                    <p class="hidden-xs">
                        Course:
                        <a class="knp-color-black" href="resume"><em>RESTful APIs in the Real World Course 2 Tutorial</em></a>                    </p>
                            </div>
        </div>

                <div class="row">
            <div class="col-xs-12 col-md-10 col-md-offset-1">
                <div class="full-block-container">
                    <div class="frame-padding">
                        <div id="player">
                                                                                <div>
                                                                <div class="row">
                                    <div class="end-show">
                                        <div class="xs-col-12">
                                            <p class="end-show-header">Keep learning!</p>
                                        </div>
                                        <div class="col-xs-12">
                                            <p class="end-show-link"><a href="../../pricing.1" class="btn btn-success btn-md">Start your All Access Pass</a></p>
                                        </div>
                                        <div class="col-xs-12">
                                            <p class="end-show-link text-center"><a href="../buy/collections" class="knp-color-white">Buy just this tutorial for $12.00</a></p>
                                        </div>
                                    </div>
                                </div>
                                                            </div>
                                                </div>
                    </div>
                </div>
            </div>
        </div>
         
        <div class="row">
            <div class="col-xs-12 col-md-10 col-md-offset-1">
                <div class="pull-right">
                                    <a class="btn btn-success"
           href="reuse-consistency#play">
            Next Chapter <i class="fa fa-caret-right"></i>
        </a>
    
                </div>

                <ul class="nav nav-tabs" role="tablist">
                    <li class="active"><a data-toggle="tab" href="creating-tokens-in-the-api#tab-script">Script</a></li>
                    <li><a data-toggle="tab" href="creating-tokens-in-the-api#tab-comment">
                        <i class="fa fa-comment-o"></i>
                                                    
                                                                                                (11)
                                                                                        Conversation
                                            </a></li>
                </ul>

                <div class="tab-content">
                    <div class="tab-pane active" id="tab-script">
                        <div class="js-script-content-wrapper top-margin-script script-content">
                                                                                        <a href="https://github.com/knpuniversity/rest/edit/master/knpu/episode2/creating-tokens-in-the-api.rst" target="_blank" class="btn btn-default btn-circle pull-right js-tooltip" title="Edit on GitHub"><span class="fa fa-pencil"></span></a>
                                                                    
  <div class="section" id="creating-token-resources-in-the-api">
<h1>Creating Token Resources in the API<a class="headerlink" href="creating-tokens-in-the-api#creating-token-resources-in-the-api" title="Permalink to this headline">¶</a></h1>
<p>Our API clients can send a token with their request to become authenticated.
But how are they supposed to get that token in the first place?</p>
<p>Actually, this is already possible via the web interface. First, let me delete
our SQLite database, which will reset our users. Now, we can login as
<a class="reference external" href="mailto:ryan&#37;&#52;&#48;knplabs&#46;com">ryan<span>&#64;</span>knplabs<span>&#46;</span>com</a> password <tt class="docutils literal"><span class="pre">foo</span></tt>. If you go to the url <tt class="docutils literal"><span class="pre">/tokens</span></tt>, you
see I have a little interface here. I can add a token, put a message, click
<cite>tokenify-me</cite> and there we go, I&#8217;ve got a shiny new token!</p>
<p>And this is something we can use right now in an API request to authenticate as
the <tt class="docutils literal"><span class="pre">ryan&#64;knplabs</span></tt> user. This is great and might actually be enough for
you. But for me, I also want a way to do this through my API. I want
to make a request through an endpoint that says &#8220;give me a new API
token.&#8221;</p>
<p>As always, let&#8217;s start with creating a new Behat Scenario. In fact this
is a whole new feature! Create a new behat feature file and call it <tt class="docutils literal"><span class="pre">token.feature</span></tt>
Let me get my necktie on here and start describing the business value for
this. In this case it&#8217;s pretty easy: you need to get tokens so you can
use our API.</p>
<div class="highlight-gherkin"><div class="highlight"><pre><span class="c"># features/api/token.feature</span><span class="nf"></span>
<span class="k">Feature:</span><span class="nf"> Token</span>
<span class="nf">  In order to access restricted information</span>
<span class="nf">  As an API client</span>
<span class="nf">  I can create tokens and use them to access information</span>
</pre></div>
</div>
<p>Perfect.</p>
<p>Next, let&#8217;s put our first scenario here, which is going to be the working
scenario for creating a token. Even though a token relates to security it&#8217;s
really no different than any other resource we&#8217;re creating, like a programmer
resource. So the scenario for this is going to look really similar. The only
difference is that we can&#8217;t authenticate with an API token, because that&#8217;s
what we are trying to get. So instead we&#8217;re going to authenticate with HTTP
Basic. First, let&#8217;s make sure there is a user in the database with a certain
password. And just like you saw with the web interface, every token has a
note describing how it&#8217;s being used. So in our request body, we&#8217;ll send JSON
with a little note.</p>
<div class="highlight-gherkin"><div class="highlight"><pre><span class="c"># features/api/token.feature</span><span class="nf"></span>
<span class="k">Feature:</span><span class="nf"> Token</span>
<span class="nf">  # ...</span>

<span class="nf">  </span><span class="k">Scenario:</span><span class="nf"> Creating a token</span>
<span class="k">    Given </span><span class="nf">there is a user &quot;</span><span class="s">weaverryan</span><span class="nf">&quot; with password &quot;</span><span class="s">test</span><span class="nf">&quot;</span>
<span class="nf">    </span><span class="k">And </span><span class="nf">I have the payload:</span>
<span class="nf">      </span><span class="k">&quot;&quot;&quot;</span><span class="s"></span>
<span class="s">      {</span>
<span class="s">        &quot;notes&quot;: &quot;A testing token!&quot;</span>
<span class="s">      }</span>
<span class="s">      </span><span class="k">&quot;&quot;&quot;</span><span class="nf"></span>
</pre></div>
</div>
<p>Great! To send HTTP basic headers with my request I have a built in line
for this. Then after that, we can make a request just like normal:</p>
<div class="highlight-gherkin"><div class="highlight"><pre><span class="c"># features/api/token.feature</span><span class="nf"></span>
<span class="k">Feature:</span><span class="nf"> Token</span>
<span class="nf">  # ...</span>

<span class="nf">  </span><span class="k">Scenario:</span><span class="nf"> Creating a token</span>
<span class="k">    Given </span><span class="nf">there is a user &quot;</span><span class="s">weaverryan</span><span class="nf">&quot; with password &quot;</span><span class="s">test</span><span class="nf">&quot;</span>
<span class="nf">    </span><span class="k">And </span><span class="nf">I have the payload:</span>
<span class="nf">      </span><span class="k">&quot;&quot;&quot;</span><span class="s"></span>
<span class="s">      {</span>
<span class="s">        &quot;notes&quot;: &quot;A testing token!&quot;</span>
<span class="s">      }</span>
<span class="s">      </span><span class="k">&quot;&quot;&quot;</span><span class="nf"></span>
<span class="nf">    </span><span class="k">And </span><span class="nf">I authenticate with user &quot;</span><span class="s">weaverryan</span><span class="nf">&quot; and password &quot;</span><span class="s">test</span><span class="nf">&quot;</span>
<span class="nf">    </span><span class="k">When </span><span class="nf">I request &quot;</span><span class="s">POST /api/tokens</span><span class="nf">&quot;</span>
</pre></div>
</div>
<p>I&#8217;m making up this URL but you can see I&#8217;m being consistent because we also
have <tt class="docutils literal"><span class="pre">/api/programmers</span></tt>.</p>
<p>After this, it&#8217;s just like our programmer endpoint: we know the status code
should be 201, that there should be a <tt class="docutils literal"><span class="pre">Location</span></tt> header and we&#8217;ll expect
that the token resource is going to be returned to us and that it will have
a key called <tt class="docutils literal"><span class="pre">token</span></tt>, which is the newly generated string:</p>
<div class="highlight-gherkin"><div class="highlight"><pre><span class="c"># features/api/token.feature</span><span class="nf"></span>
<span class="k">Feature:</span><span class="nf"> Token</span>
<span class="nf">  # ...</span>

<span class="nf">  </span><span class="k">Scenario:</span><span class="nf"> Creating a token</span>
<span class="k">    Given </span><span class="nf">there is a user &quot;</span><span class="s">weaverryan</span><span class="nf">&quot; with password &quot;</span><span class="s">test</span><span class="nf">&quot;</span>
<span class="nf">    </span><span class="k">And </span><span class="nf">I have the payload:</span>
<span class="nf">      </span><span class="k">&quot;&quot;&quot;</span><span class="s"></span>
<span class="s">      {</span>
<span class="s">        &quot;notes&quot;: &quot;A testing token!&quot;</span>
<span class="s">      }</span>
<span class="s">      </span><span class="k">&quot;&quot;&quot;</span><span class="nf"></span>
<span class="nf">    </span><span class="k">And </span><span class="nf">I authenticate with user &quot;</span><span class="s">weaverryan</span><span class="nf">&quot; and password &quot;</span><span class="s">test</span><span class="nf">&quot;</span>
<span class="nf">    </span><span class="k">When </span><span class="nf">I request &quot;</span><span class="s">POST /api/tokens</span><span class="nf">&quot;</span>
<span class="nf">    </span><span class="k">Then </span><span class="nf">the response status code should be </span><span class="s">201</span><span class="nf"></span>
<span class="nf">    </span><span class="k">And </span><span class="nf">the &quot;</span><span class="s">Location</span><span class="nf">&quot; header should exist</span>
<span class="nf">    </span><span class="k">And </span><span class="nf">the &quot;</span><span class="s">token</span><span class="nf">&quot; property should be a string</span>
</pre></div>
</div>
<p>Awesome!</p>
<p>So let&#8217;s try this: we know it&#8217;s going to fail but we want to confirm that:</p>
<div class="highlight-bash"><div class="highlight"><pre>php vendor/bin/behat features/api/token.feature
</pre></div>
</div>
<p>Failure, sweet! And it does with a 404 because we don&#8217;t have an endpoint
for this.</p>
<div class="section" id="creating-the-tokencontroller">
<h2>Creating the TokenController<a class="headerlink" href="creating-tokens-in-the-api#creating-the-tokencontroller" title="Permalink to this headline">¶</a></h2>
<p>To get this working, I&#8217;m going to create an entirely new controller class
and make it look a bit like my <tt class="docutils literal"><span class="pre">ProgrammerController</span></tt>. Make it extend the
<tt class="docutils literal"><span class="pre">BaseController</span></tt> class which we&#8217;ve been adding more helper methods into.
Notice that I did just add a <tt class="docutils literal"><span class="pre">use</span></tt> statement for that:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="c1">// src/KnpU/CodeBattle/Controller/Api/TokenController.php</span>
<span class="k">namespace</span> <span class="nx">KnpU\CodeBattle\Controller\Api</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">KnpU\CodeBattle\Controller\BaseController</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">TokenController</span> <span class="k">extends</span> <span class="nx">BaseController</span>
<span class="p">{</span>
<span class="p">}</span>
</pre></div>
</div>
<p>And it expects us to have one method called <tt class="docutils literal"><span class="pre">addRoutes</span></tt>. This is special
to my implementation of Silex, but you&#8217;ll remember that we have this at the
top of <tt class="docutils literal"><span class="pre">ProgrammerController</span></tt> and that&#8217;s just where we build all of our
endpoints. We can do the same things here. We&#8217;ll add a new <tt class="docutils literal"><span class="pre">POST</span></tt> endpoint
for <tt class="docutils literal"><span class="pre">/api/tokens</span></tt> that will execute a method called <tt class="docutils literal"><span class="pre">newAction</span></tt> when
we hit it:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="c1">// src/KnpU/CodeBattle/Controller/Api/TokenController.php</span>
<span class="c1">// ...</span>

<span class="k">class</span> <span class="nc">TokenController</span> <span class="k">extends</span> <span class="nx">BaseController</span>
<span class="p">{</span>
    <span class="k">protected</span> <span class="k">function</span> <span class="nf">addRoutes</span><span class="p">(</span><span class="nx">ControllerCollection</span> <span class="nv">$controllers</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$controllers</span><span class="o">-&gt;</span><span class="na">post</span><span class="p">(</span><span class="s1">&#39;/api/tokens&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="nv">$this</span><span class="p">,</span> <span class="s1">&#39;newAction&#39;</span><span class="p">));</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">newAction</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="s1">&#39;foo&#39;</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>So let&#8217;s go back and rerun the tests. Look at that, it <em>is</em> working. The
test still fails, but instead of a 404, we see a 200 status code because
we&#8217;re returning <tt class="docutils literal"><span class="pre">foo</span></tt>.</p>
</div>
<div class="section" id="creating-the-token-resource">
<h2>Creating the Token Resource<a class="headerlink" href="creating-tokens-in-the-api#creating-the-token-resource" title="Permalink to this headline">¶</a></h2>
<p>So let&#8217;s do as little work as possible to get this going. The first thing
to know is that we <em>do</em> have a token table. And just like with our other
tables like the <tt class="docutils literal"><span class="pre">programmer</span></tt> table where we have a <tt class="docutils literal"><span class="pre">Programmer</span></tt> class,
I&#8217;ve also created an <tt class="docutils literal"><span class="pre">ApiToken</span></tt> class:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="c1">// src/KnpU/CodeBattle/Security/Token/ApiToken.php</span>
<span class="k">namespace</span> <span class="nx">KnpU\CodeBattle\Security\Token</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Constraints</span> <span class="k">as</span> <span class="nx">Assert</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">ApiToken</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="nv">$id</span><span class="p">;</span>

    <span class="k">public</span> <span class="nv">$token</span><span class="p">;</span>

    <span class="sd">/**</span>
<span class="sd">     * @Assert\NotBlank(message=&quot;Please add some notes about this token&quot;)</span>
<span class="sd">     */</span>
    <span class="k">public</span> <span class="nv">$notes</span><span class="p">;</span>

    <span class="k">public</span> <span class="nv">$userId</span><span class="p">;</span>

    <span class="k">public</span> <span class="nv">$createdAt</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$userId</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">userId</span> <span class="o">=</span> <span class="nv">$userId</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">createdAt</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">\DateTime</span><span class="p">();</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">token</span> <span class="o">=</span> <span class="nb">base_convert</span><span class="p">(</span><span class="nb">sha1</span><span class="p">(</span><span class="nb">uniqid</span><span class="p">(</span><span class="nx">mt_rand</span><span class="p">(),</span> <span class="k">true</span><span class="p">)),</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">36</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>If we can create this new <tt class="docutils literal"><span class="pre">ApiToken</span></tt> object, then we can use some ORM-magic
I setup to save a new row to that table.</p>
<p>So let&#8217;s start doing that: <tt class="docutils literal"><span class="pre">$token</span> <span class="pre">=</span> <span class="pre">new</span> <span class="pre">ApiToken();</span></tt>. I&#8217;ll add the <tt class="docutils literal"><span class="pre">use</span></tt>
statement for that:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="c1">// src/KnpU/CodeBattle/Controller/Api/TokenController.php</span>
<span class="c1">// ...</span>

<span class="k">public</span> <span class="k">function</span> <span class="nf">newAction</span><span class="p">()</span>
<span class="p">{</span>
    <span class="nv">$token</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ApiToken</span><span class="p">();</span>
<span class="p">}</span>
</pre></div>
</div>
<p>You can see immediately it&#8217;s angry with me because I need to pass the <tt class="docutils literal"><span class="pre">userId</span></tt>
to the constructor. Now, what is the <tt class="docutils literal"><span class="pre">id</span></tt> of the current user? Remember,
in our scenario, we&#8217;re passing HTTP Basic authentication. So here we need
to grab the HTTP Basic username and look that up in the database. I&#8217;m not
going to worry about checking the password yet, we&#8217;ll do that in a second.</p>
<p>In Silex, whenever you need request information you can just type hint a
<tt class="docutils literal"><span class="pre">$request</span></tt> variable in your controller and it will be passed in. Am I sounding
like a broken record yet? Don&#8217;t forget your <tt class="docutils literal"><span class="pre">use</span></tt> statement!</p>
<div class="highlight-php"><div class="highlight"><pre><span class="c1">// src/KnpU/CodeBattle/Controller/Api/TokenController.php</span>
<span class="c1">// ...</span>

<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Request</span><span class="p">;</span>
<span class="c1">// ...</span>

<span class="k">public</span> <span class="k">function</span> <span class="nf">newAction</span><span class="p">(</span><span class="nx">Request</span> <span class="nv">$request</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nv">$token</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ApiToken</span><span class="p">();</span>
<span class="p">}</span>
</pre></div>
</div>
<p>You may or may not remember this - I had to look it up - but if you want to get
the HTTP Basic username that&#8217;s sent with the request, you can say
<tt class="docutils literal"><span class="pre">$request-&gt;headers-&gt;get('PHP_AUTH_USER')</span></tt>. Oops don&#8217;t forget your equals sign.
Next I&#8217;ll look this up in our user table. For now we&#8217;ll just assume it exists:
I&#8217;m living on the edge by not doing any error handling. And then, we&#8217;re going to
say <tt class="docutils literal"><span class="pre">$user-&gt;id</span></tt>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="c1">// src/KnpU/CodeBattle/Controller/Api/TokenController.php</span>
<span class="c1">// ...</span>

<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Request</span><span class="p">;</span>
<span class="c1">// ...</span>

<span class="k">public</span> <span class="k">function</span> <span class="nf">newAction</span><span class="p">(</span><span class="nx">Request</span> <span class="nv">$request</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nv">$username</span> <span class="o">=</span> <span class="nv">$request</span><span class="o">-&gt;</span><span class="na">headers</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;PHP_AUTH_USER&#39;</span><span class="p">);</span>
    <span class="nv">$user</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getUserRepository</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">findUserByUsername</span><span class="p">(</span><span class="nv">$username</span><span class="p">);</span>

    <span class="nv">$token</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ApiToken</span><span class="p">(</span><span class="nv">$user</span><span class="o">-&gt;</span><span class="na">id</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Perfect!</p>
<div class="section" id="decoding-the-request-body">
<h3>Decoding the Request Body<a class="headerlink" href="creating-tokens-in-the-api#decoding-the-request-body" title="Permalink to this headline">¶</a></h3>
<p>Next, we need to set the notes. In our scenario we&#8217;re sending a JSON body
with a notes field. So here, what we can do is just grab that from the request.
We did this before in Episode 1: <tt class="docutils literal"><span class="pre">$request-&gt;getContent()</span></tt> gets us the
raw JSON and <tt class="docutils literal"><span class="pre">json_decode</span></tt> will return an array. So, we&#8217;ll get the notes
key off of that. And that&#8217;s really it! All we need to do now is save the
token object, which I&#8217;ll do with my simple ORM system:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="c1">// src/KnpU/CodeBattle/Controller/Api/TokenController.php</span>
<span class="c1">// ...</span>

<span class="k">public</span> <span class="k">function</span> <span class="nf">newAction</span><span class="p">(</span><span class="nx">Request</span> <span class="nv">$request</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nv">$username</span> <span class="o">=</span> <span class="nv">$request</span><span class="o">-&gt;</span><span class="na">headers</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;PHP_AUTH_USER&#39;</span><span class="p">);</span>

    <span class="nv">$user</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getUserRepository</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">findUserByUsername</span><span class="p">(</span><span class="nv">$username</span><span class="p">);</span>

    <span class="nv">$data</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nv">$request</span><span class="o">-&gt;</span><span class="na">getContent</span><span class="p">(),</span> <span class="k">true</span><span class="p">);</span>

    <span class="nv">$token</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ApiToken</span><span class="p">(</span><span class="nv">$user</span><span class="o">-&gt;</span><span class="na">id</span><span class="p">);</span>
    <span class="nv">$token</span><span class="o">-&gt;</span><span class="na">notes</span> <span class="o">=</span> <span class="nv">$data</span><span class="p">[</span><span class="s1">&#39;notes&#39;</span><span class="p">];</span>

    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getApiTokenRepository</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">save</span><span class="p">(</span><span class="nv">$token</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Now, we need to return our normal API response. Remember we&#8217;re using the
Serializer at this point and in the last couple of chapters we created a
nice new function in our <tt class="docutils literal"><span class="pre">BaseController</span></tt> called <tt class="docutils literal"><span class="pre">createApiResponse</span></tt>.
All we need to do is pass it the object we want to serialize and the status
code - 201 here - and that&#8217;s going to build and return the response for us:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="c1">// src/KnpU/CodeBattle/Controller/Api/TokenController.php</span>
<span class="c1">// ...</span>

<span class="k">public</span> <span class="k">function</span> <span class="nf">newAction</span><span class="p">(</span><span class="nx">Request</span> <span class="nv">$request</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getApiTokenRepository</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">save</span><span class="p">(</span><span class="nv">$token</span><span class="p">);</span>

    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">createApiResponse</span><span class="p">(</span><span class="nv">$token</span><span class="p">,</span> <span class="mi">201</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
<p>That&#8217;s as simple as Jean-Luc Picard sending the Enterprise into warp! Engage.</p>
<p>Head over to the terminal:</p>
<div class="highlight-bash"><div class="highlight"><pre>php vendor/bin/behat features/api/token.feature
</pre></div>
</div>
<p>Awesome...ish! So it&#8217;s failing because we don&#8217;t have a <tt class="docutils literal"><span class="pre">Location</span></tt> header
set, but if you look at what&#8217;s being returned from the endpoint, you can
tell it&#8217;s actually working and inserting this in the database. We&#8217;re missing
the <tt class="docutils literal"><span class="pre">Location</span></tt> header and we <em>should</em> have it, but for now I&#8217;m just going
to comment that line out. I don&#8217;t want to take the time to build the endpoint
to view a single token. I&#8217;ll let you handle that:</p>
<div class="highlight-gherkin"><div class="highlight"><pre><span class="c"># features/api/token.feature</span><span class="nf"></span>
<span class="c"># ...</span><span class="nf"></span>

<span class="k">Scenario:</span><span class="nf"> Creating a token</span>
<span class="nf">  </span><span class="c"># ...</span><span class="nf"></span>
<span class="k">  When </span><span class="nf">I request &quot;</span><span class="s">POST /api/tokens</span><span class="nf">&quot;</span>
<span class="nf">  </span><span class="k">Then </span><span class="nf">the response status code should be </span><span class="s">201</span><span class="nf"></span>
<span class="nf">  </span><span class="c"># And the &quot;Location&quot; header should exist</span><span class="nf"></span>
<span class="nf">  </span><span class="k">And </span><span class="nf">the &quot;</span><span class="s">token</span><span class="nf">&quot; property should be a string</span>
</pre></div>
</div>
<p>Let&#8217;s run the test. Perfect it passes!</p>
</div>
</div>
<div class="section" id="testing-for-a-bad-http-basic-password">
<h2>Testing for a Bad HTTP Basic Password<a class="headerlink" href="creating-tokens-in-the-api#testing-for-a-bad-http-basic-password" title="Permalink to this headline">¶</a></h2>
<p>Since we&#8217;re not checking to see if the password is valid, let&#8217;s add another
scenario for that. We can copy most of the working scenario but we&#8217;ll change
a couple of things. Instead of the right password we&#8217;ll send something different.
And instead  of 201 this time it&#8217;s going to be a 401:</p>
<div class="highlight-gherkin"><div class="highlight"><pre><span class="c"># features/api/token.feature</span><span class="nf"></span>
<span class="c"># ...</span><span class="nf"></span>

<span class="k">Scenario:</span><span class="nf"> Creating a token with a bad password</span>
<span class="k">  Given </span><span class="nf">there is a user &quot;</span><span class="s">weaverryan</span><span class="nf">&quot; with password &quot;</span><span class="s">test</span><span class="nf">&quot;</span>
<span class="nf">  </span><span class="k">And </span><span class="nf">I have the payload:</span>
<span class="nf">    </span><span class="k">&quot;&quot;&quot;</span><span class="s"></span>
<span class="s">    {</span>
<span class="s">      &quot;notes&quot;: &quot;A testing token!&quot;</span>
<span class="s">    }</span>
<span class="s">    </span><span class="k">&quot;&quot;&quot;</span><span class="nf"></span>
<span class="nf">  </span><span class="k">And </span><span class="nf">I authenticate with user &quot;</span><span class="s">weaverryan</span><span class="nf">&quot; and password &quot;</span><span class="s">WRONG</span><span class="nf">&quot;</span>
<span class="nf">  </span><span class="k">When </span><span class="nf">I request &quot;</span><span class="s">POST /api/tokens</span><span class="nf">&quot;</span>
<span class="nf">  </span><span class="k">Then </span><span class="nf">the response status code should be </span><span class="s">401</span><span class="nf"></span>
</pre></div>
</div>
<p>Remember whenever we have an error response, we are always returning that
API Problem format. Great! So let&#8217;s run just this one scenario which starts
on line 21. And again, we&#8217;re expecting it to fail, but I like to see my failures
before I actually do the code:</p>
<div class="highlight-bash"><div class="highlight"><pre>php vendor/bin/behat features/api/token.feature:21
</pre></div>
</div>
<p>Yes, failing!</p>
<div class="section" id="activating-silex-s-http-basic-authentication">
<h3>Activating Silex&#8217;s HTTP Basic Authentication<a class="headerlink" href="creating-tokens-in-the-api#activating-silex-s-http-basic-authentication" title="Permalink to this headline">¶</a></h3>
<p>In our controller we need to check to see if the password is correct for
the user. But hey, let&#8217;s not do that, Silex can help us with some of this
straightforward logic. In my main <tt class="docutils literal"><span class="pre">Application</span></tt> class, where I configure
my security, I&#8217;ve already setup things to allow http basic to happen. By
adding this little key here, when the http basic username and password come
into the request, the Silex security system will automatically look up the
user object and deny access if they have the wrong password:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="c1">// src/KnpU/CodeBattle/Application.php</span>
<span class="c1">// ...</span>

<span class="k">private</span> <span class="k">function</span> <span class="nf">configureSecurity</span><span class="p">()</span>
<span class="p">{</span>
    <span class="nv">$app</span> <span class="o">=</span> <span class="nv">$this</span><span class="p">;</span>

    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">register</span><span class="p">(</span><span class="k">new</span> <span class="nx">SecurityServiceProvider</span><span class="p">(),</span> <span class="k">array</span><span class="p">(</span>
        <span class="s1">&#39;security.firewalls&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
            <span class="s1">&#39;api&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
                <span class="c1">// ...</span>

                <span class="c1">// add this line to the bottom of the array</span>
                <span class="s1">&#39;http&#39;</span> <span class="o">=&gt;</span> <span class="k">true</span><span class="p">,</span>
            <span class="p">),</span>
            <span class="c1">// ...</span>
        <span class="p">)</span>
    <span class="p">));</span>
    <span class="c1">// ...</span>
<span class="p">}</span>
</pre></div>
</div>
<p>It&#8217;s kind of like our API token system: but instead of sending a token it&#8217;s
going to be reading it off of the HTTP Basic username and password headers.
That&#8217;s pretty handy.</p>
<p>That means that in the controller, if we need the actual user object we don&#8217;t
need to query for it - the security system already did that for us. We can
just say <tt class="docutils literal"><span class="pre">$this-&gt;getLoggedInUser()</span></tt>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="c1">// src/KnpU/CodeBattle/Controller/Api/TokenController.php</span>
<span class="c1">// ...</span>

<span class="k">public</span> <span class="k">function</span> <span class="nf">newAction</span><span class="p">(</span><span class="nx">Request</span> <span class="nv">$request</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="nv">$token</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ApiToken</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getLoggedInUser</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">id</span><span class="p">);</span>
    <span class="c1">// ...</span>
<span class="p">}</span>
</pre></div>
</div>
<p>We don&#8217;t really know if the user logged in via HTTP basic or passed a token,
and frankly we don&#8217;t care. And since we need our user to be logged in for
this endpoint, we can use our nice  <tt class="docutils literal"><span class="pre">$this-&gt;enforceUserSecurity()</span></tt> function:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="c1">// src/KnpU/CodeBattle/Controller/Api/TokenController.php</span>
<span class="c1">// ...</span>

<span class="k">public</span> <span class="k">function</span> <span class="nf">newAction</span><span class="p">(</span><span class="nx">Request</span> <span class="nv">$request</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">enforceUserSecurity</span><span class="p">();</span>

    <span class="c1">// ...</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Perfect, let&#8217;s try that out. And it passes with almost no effort!</p>
</div>
</div>
</div>


    
                        </div>
                    </div>
                    <div class="tab-pane" id="tab-comment">
                        <h3>Leave a comment!</h3>
                                                        <div id="disqus_thread">
                <style type="text/css">
            #dsq-comments {padding: 10px 0 0}
            .dsq-comment {position: relative;clear: both;margin: 0 0 1.5em;}
            .dsq-avatar {left: 0;position: absolute;}
            .dsq-avatar img {border: 0 none;border-radius: 3px;height: 36px;width: 36px;}
            .dsq-comment-body {padding: 0 0 0 46px;}
            .dsq-comment-header {border: 1px solid rgba(0, 0, 0, 0.15);border-radius: 3px;font-size: 13px;line-height: 14px;margin: 0 0 1em;max-height: 36px;overflow: hidden;padding: 10px;position: relative;text-overflow: ellipsis;white-space: nowrap;}
            .dsq-comment-message {word-wrap: break-word;}
            .dsq-comment-message {line-height: 1.5em;margin: 0 0 1em;}
            .dsq-comment-text {display: inline;}
            .dsq-comment-date {float: right;font-size: 90%;margin: 0 12px 0 0;}
        </style>

	    <div id="dsq-content">
	        <ul id="dsq-comments">
	            	                <li class="dsq-comment dsq-clearfix" data-dsq-comment-id="2082539198" id="dsq-comment-2082539198">
	                    <div class="dsq-avatar dsq-tt">
	                        <a href="https://disqus.com/by/weaverryan/">
	                            	                                <img alt="" src="http://a.disquscdn.com/uploads/users/32/6480/avatar92.jpg?1482356913">
	                            	                        </a>
	                    </div>
	                    <div class="dsq-comment-body" id="dsq-comment-body-2082539198">
	                        <div class="dsq-comment-header">
	                            <span class="dsq-comment-date">2015-06-16</span>
	                            <span class="dsq-commenter-name">weaverryan</span>
	                        </div>

	                        <div id="dsq-comment-message-2082539198" class="dsq-comment-message">
	                            <div id="dsq-comment-text-2082539198" class="dsq-comment-text">
	                                <p>Yep, you're right about the ordering. Silex is missing a setting where we can set the "entry point" at the firewall level explicitlyThe Symfony framework has this - it's probably missing from Silex just on accident.</p><p>Cheers!</p>
	                            </div>
	                        </div>
	                    </div>
	                </li>
	            	                <li class="dsq-comment dsq-clearfix" data-dsq-comment-id="2081498048" id="dsq-comment-2081498048">
	                    <div class="dsq-avatar dsq-tt">
	                        <a href="https://disqus.com/by/jacobkiers/">
	                            	                                <img alt="" src="http://a.disquscdn.com/uploads/users/2934/2749/avatar92.jpg?1434440668">
	                            	                        </a>
	                    </div>
	                    <div class="dsq-comment-body" id="dsq-comment-body-2081498048">
	                        <div class="dsq-comment-header">
	                            <span class="dsq-comment-date">2015-06-16</span>
	                            <span class="dsq-commenter-name">Jacob Kiers</span>
	                        </div>

	                        <div id="dsq-comment-message-2081498048" class="dsq-comment-message">
	                            <div id="dsq-comment-text-2081498048" class="dsq-comment-text">
	                                <p>Hi Ryan. I tested that, and it works indeed. Furthermore, it seems that Silex overrides the entry point each time a new authentication provider is registered. So moving the "http =&gt; true" line above the "api_token =&gt; true" line works too. That is a bit hacky, though. Your solution is definitively cleaner.</p>
	                            </div>
	                        </div>
	                    </div>
	                </li>
	            	                <li class="dsq-comment dsq-clearfix" data-dsq-comment-id="2080383753" id="dsq-comment-2080383753">
	                    <div class="dsq-avatar dsq-tt">
	                        <a href="https://disqus.com/by/weaverryan/">
	                            	                                <img alt="" src="http://a.disquscdn.com/uploads/users/32/6480/avatar92.jpg?1482356913">
	                            	                        </a>
	                    </div>
	                    <div class="dsq-comment-body" id="dsq-comment-body-2080383753">
	                        <div class="dsq-comment-header">
	                            <span class="dsq-comment-date">2015-06-15</span>
	                            <span class="dsq-commenter-name">weaverryan</span>
	                        </div>

	                        <div id="dsq-comment-message-2080383753" class="dsq-comment-message">
	                            <div id="dsq-comment-text-2080383753" class="dsq-comment-text">
	                                <p>Hey Jacob!</p><p>Haha, wow - nice work. And you're right - the HTTP Basic error is a 401, but not an Api Problem response - I had overlooked that. The response *is* blank, so we could really probably be "ok" with this - the headers and status code tell the whole story.</p><p>But, in the interest of consistency, let's make this *also* return an API Problem response. The Symfony security stuff here is complex, but fortunately you don't need to override the BasicAuthenticationListener (but nice digging!). There is something called an "entry point", which is what's called when the system needs to tell the user "hey, you should login!". That's used inside the BasicAuthenticationListener, and we can use that. In fact, we already have an entry point setup for the "api_token" authentication system, and we can re-use it here.</p><p>The end result - summarized - looks like this: <a href="https://disq.us/url?url=https%3A%2F%2Fgist.github.com%2Fweaverryan%2Fee47c1710f4feea97217%3AfxPDwJVi1HlFxDWXtAXHWm3wZc8&amp;cuid=1175718" rel="nofollow noopener">https://gist.github.com/weaver...</a>.</p><p>Let me know if that works or doesn't make any sense at all :).</p><p>Cheers!</p>
	                            </div>
	                        </div>
	                    </div>
	                </li>
	            	                <li class="dsq-comment dsq-clearfix" data-dsq-comment-id="2075701878" id="dsq-comment-2075701878">
	                    <div class="dsq-avatar dsq-tt">
	                        <a href="https://disqus.com/by/jacobkiers/">
	                            	                                <img alt="" src="http://a.disquscdn.com/uploads/users/2934/2749/avatar92.jpg?1434440668">
	                            	                        </a>
	                    </div>
	                    <div class="dsq-comment-body" id="dsq-comment-body-2075701878">
	                        <div class="dsq-comment-header">
	                            <span class="dsq-comment-date">2015-06-12</span>
	                            <span class="dsq-commenter-name">Jacob Kiers</span>
	                        </div>

	                        <div id="dsq-comment-message-2075701878" class="dsq-comment-message">
	                            <div id="dsq-comment-text-2075701878" class="dsq-comment-text">
	                                <p>Actually, disabling the HTTP authentication makes the $this-&gt;enforceUserSecurity() call fail. So to keep the HTTP Basic authentication working, it does need to be enabled. However, in that case, not API Problem response is returned as said before.</p><p>Further investigation shows that the BasicAuthenticationListener of the Firewall catches the AuthenticationException and sets a response. Therefore, the error handler is not returned.</p><p>To solve this, it is necessary to register our own BasicAuthenticationListener for the API:</p><p>$this['security.authentication_listener.api.http'] = $app-&gt;share(function () use ($app) {<br>    return new ApiBasicAuthenticationListener(<br>        $app['security'],<br>        $app['security.authentication_manager'],<br>        'api',<br>        $app['security.entry_point.api.http'],<br>        $app['logger']<br>    );<br>});</p><p>I just copied the default BasicAuthenticationListener, and removed the try/catch block around the authenticate call in its ::handle() method.</p><p>That makes sure that the AuthenticationException is thrown. Now our custom error listener is called. We have one more problem here: the error listener sets the statusCode to 500. Therefore, we have to manually register the ErrorListener, instead of using the Silex $app-&gt;error() method. Furthermore, the callback needs to handle the AuthenticationException. And finally, the priority of this event listener needs to be higher.</p><p>The full implementation of the new error listener callback is as follows:</p><p>private function configureListeners()<br>{<br>    $app = $this;</p><p>    $callback = function(GetResponseForExceptionEvent $event, $statusCode) use ($app) {<br>        $exception = $event-&gt;getException();<br>        // only act on /api URLs<br>        if (strpos($app['request']-&gt;getPathInfo(), '/api') !== 0) {<br>            return;<br>        }</p><p>        // allow 500 errors in debug to be thrown<br>        if ($app['debug'] &amp;&amp; $statusCode == 500) {<br>            return;<br>        }</p><p>        if ($exception instanceof ApiProblemException) {<br>            $apiProblem = $exception-&gt;getApiProblem();<br>        } elseif ($exception instanceof AuthenticationException) {<br>            $apiProblem = new ApiProblem(401, ApiProblem::TYPE_AUTHENTICATION_ERROR);<br>        } else {<br>            $apiProblem = new ApiProblem(<br>                $statusCode<br>            );</p><p>            /*<br>             * If it's an HttpException message (e.g. for 404, 403),<br>             * we'll say as a rule that the exception message is safe<br>             * for the client. Otherwise, it could be some sensitive<br>             * low-level exception, which should *not* be exposed<br>             */<br>            if ($exception instanceof HttpException) {<br>                $apiProblem-&gt;set('detail', $exception-&gt;getMessage());<br>            }<br>        }</p><p>        $response = $app['api.response_factory']-&gt;createResponse($apiProblem);</p><p>        $event-&gt;setResponse($response);<br>        $event-&gt;stopPropagation();<br>    };</p><p>    $this-&gt;on(KernelEvents::EXCEPTION, $callback, 100);<br>}<br>You might be able to use this if you decide to update this course.</p><p>In order to make sure that it is possible: to the extent possible under law,</p><p>Jacob Kiers<br>has waived all copyright and related or neighboring rights to<br>this post ( <a href="https://disq.us/url?url=https%3A%2F%2Fcreativecommons.org%2Fpublicdomain%2Fzero%2F1.0%2F%3AHX1LUDED5ekWarXtHWZ9ZuEmcTU&amp;cuid=1175718" rel="nofollow noopener">https://creativecommons.org/pu...</a> ).</p><p>Again, thanks for this great course!</p><p>-- Jacob</p>
	                            </div>
	                        </div>
	                    </div>
	                </li>
	            	                <li class="dsq-comment dsq-clearfix" data-dsq-comment-id="2075442412" id="dsq-comment-2075442412">
	                    <div class="dsq-avatar dsq-tt">
	                        <a href="https://disqus.com/by/jacobkiers/">
	                            	                                <img alt="" src="http://a.disquscdn.com/uploads/users/2934/2749/avatar92.jpg?1434440668">
	                            	                        </a>
	                    </div>
	                    <div class="dsq-comment-body" id="dsq-comment-body-2075442412">
	                        <div class="dsq-comment-header">
	                            <span class="dsq-comment-date">2015-06-12</span>
	                            <span class="dsq-commenter-name">Jacob Kiers</span>
	                        </div>

	                        <div id="dsq-comment-message-2075442412" class="dsq-comment-message">
	                            <div id="dsq-comment-text-2075442412" class="dsq-comment-text">
	                                <p>Ryan,</p><p>First off, thank you for these informative courses. I really enjoy learning about these techniques.</p><p>Now, in the part about checking the authentication and enabling the Silex HTTP Authentication (<a href="https://disq.us/url?url=https%3A%2F%2Fknpuniversity.com%2Fscreencast%2Frest-ep2%2Fcreating-tokens-in-the-api%23testing-for-a-bad-http-basic-password%3ASoihzvwubqYtU2dce_uvXp2w5Zk&amp;cuid=1175718" rel="nofollow noopener">https://knpuniversity.com/scre...</a> ff.), when the 'http' argument is enabled, the API does not in fact return a API Problem response. Instead, it just sends an empty HTTP 401 response with content-type text/html. So technically, the feature should not pass in that case.</p><p>That can indeed be solved by using '$this-&gt;enforceUserSecurity()', however, in that case the 'http' argument on the firewall needs to be disabled (that is not said explicitly in this course).</p><p>Now as for my question: is it possible to use the Silex HTTP Authentication feature, and still return an API Problem response when the request is for one of the /api routes?</p>
	                            </div>
	                        </div>
	                    </div>
	                </li>
	            	                <li class="dsq-comment dsq-clearfix" data-dsq-comment-id="1788503528" id="dsq-comment-1788503528">
	                    <div class="dsq-avatar dsq-tt">
	                        <a href="https://disqus.com/by/weaverryan/">
	                            	                                <img alt="" src="http://a.disquscdn.com/uploads/users/32/6480/avatar92.jpg?1482356913">
	                            	                        </a>
	                    </div>
	                    <div class="dsq-comment-body" id="dsq-comment-body-1788503528">
	                        <div class="dsq-comment-header">
	                            <span class="dsq-comment-date">2015-01-12</span>
	                            <span class="dsq-commenter-name">weaverryan</span>
	                        </div>

	                        <div id="dsq-comment-message-1788503528" class="dsq-comment-message">
	                            <div id="dsq-comment-text-1788503528" class="dsq-comment-text">
	                                <p>Hey Joan!</p><p>Yes, the Disqus issue is actually my fault - but I noticed it too and will fix it soon! Thanks for re-posting.</p><p>To answer your question about validation, what you typically have is 2 properties in this case: plainPassword (which is *not* persisted, but which *is* validated) and password (which is persisted, but not validated, and contains the encoded password). You can see that this solves you problem. It also solves the potential problem of setting a plain password on your property, somehow forgetting to encode it, and ending up with plain passwords in your database.</p><p>Cheers!</p>
	                            </div>
	                        </div>
	                    </div>
	                </li>
	            	                <li class="dsq-comment dsq-clearfix" data-dsq-comment-id="1782013062" id="dsq-comment-1782013062">
	                    <div class="dsq-avatar dsq-tt">
	                        <a href="creating-tokens-in-the-api">
	                            	                                <img alt="" src="http://a.disquscdn.com/1479321018/images/noavatar92.png">
	                            	                        </a>
	                    </div>
	                    <div class="dsq-comment-body" id="dsq-comment-body-1782013062">
	                        <div class="dsq-comment-header">
	                            <span class="dsq-comment-date">2015-01-09</span>
	                            <span class="dsq-commenter-name">Guest</span>
	                        </div>

	                        <div id="dsq-comment-message-1782013062" class="dsq-comment-message">
	                            <div id="dsq-comment-text-1782013062" class="dsq-comment-text">
	                                <p>Sorry that I start a new thread, apparently disqus is not loading our previous conversation. I just came to share my stupidity with everyone x)</p><p>Ryan, as you suggested, making the request with a token worked. I narrowed it down to the fact that the passwords weren't matching, yesterday I spent the whole day trying to find out how did the encode actually work and also, I discarded the Salt as I wasn't using it, also got lost into the Security Component. But today, after a couple of tests in the same direction I thought, what if I am not saving the password properly? I dumped the encoded password and realized that it had 88 chars. My row in the database was limited to 50. Shame on me.</p><p>All of this made me realize that the validation via annotations doesn't work for the user password, because of all of this encoding process. Is there an obvious workaround?</p><p>In other words:</p><p>if ($errors = $this-&gt;validate($programmer)) {<br>            $this-&gt;throwApiProblemValidationException($errors);<br>        }</p><p>doesn't throw an Exception for a password with 1 character with this Annotations:</p><p>/**<br>     * @Assert\Length(<br>     *      min = 8,<br>     *      max = 26,<br>     *      minMessage = "The password must be at least {{ limit }} characters long",<br>     *      maxMessage = "The password cannot be longer than {{ limit }} characters long"<br>     * )<br>     */<br>    public $password;</p>
	                            </div>
	                        </div>
	                    </div>
	                </li>
	            	                <li class="dsq-comment dsq-clearfix" data-dsq-comment-id="1777612373" id="dsq-comment-1777612373">
	                    <div class="dsq-avatar dsq-tt">
	                        <a href="https://disqus.com/by/weaverryan/">
	                            	                                <img alt="" src="http://a.disquscdn.com/uploads/users/32/6480/avatar92.jpg?1482356913">
	                            	                        </a>
	                    </div>
	                    <div class="dsq-comment-body" id="dsq-comment-body-1777612373">
	                        <div class="dsq-comment-header">
	                            <span class="dsq-comment-date">2015-01-08</span>
	                            <span class="dsq-commenter-name">weaverryan</span>
	                        </div>

	                        <div id="dsq-comment-message-1777612373" class="dsq-comment-message">
	                            <div id="dsq-comment-text-1777612373" class="dsq-comment-text">
	                                <p>Hey Joan!</p><p>If you send an API token to this endpoint (i.e. authenticate like you do with any other endpoint), does it work? If so, then we know the problem is quite simply that the HTTP Basic authentication isn't working - and that there's nothing special about this URL/controller that is causing issues.</p><p>If you're debugging this, I wouldn't look directly at the Authorization header, as I believe there's some encoding that happens, so it might be confusing (<a href="http://disq.us/url?url=http%3A%2F%2Fen.wikipedia.org%2Fwiki%2FBasic_access_authentication%23Client_side%29%3AmlnZM5WDcE-BJbKWz9m2oquEC58&amp;cuid=1175718" rel="nofollow noopener">http://en.wikipedia.org/wiki/B...</a>. Instead, add some var_dump and die statements to the BasicAuthenticationListener class (deep in the core of Symfony) - it is the equivalent of ApiTokenListener, but for the HTTP Basic authentication. My guess is that the username/password is being sent incorrectly, or isn't matching up with how you're encoding/salting passwords in the db. Also, tail logs/development.log as some of what's going on in the security system *is* logged.</p><p>Good luck!</p>
	                            </div>
	                        </div>
	                    </div>
	                </li>
	            	                <li class="dsq-comment dsq-clearfix" data-dsq-comment-id="1777269868" id="dsq-comment-1777269868">
	                    <div class="dsq-avatar dsq-tt">
	                        <a href="https://disqus.com/by/joanboixados/">
	                            	                                <img alt="" src="http://a.disquscdn.com/uploads/users/11913/8926/avatar92.jpg?1412715871">
	                            	                        </a>
	                    </div>
	                    <div class="dsq-comment-body" id="dsq-comment-body-1777269868">
	                        <div class="dsq-comment-header">
	                            <span class="dsq-comment-date">2015-01-07</span>
	                            <span class="dsq-commenter-name">Joan</span>
	                        </div>

	                        <div id="dsq-comment-message-1777269868" class="dsq-comment-message">
	                            <div id="dsq-comment-text-1777269868" class="dsq-comment-text">
	                                <p>Thanks for the prompt answer Ryan. As I don't intend to do a web version I haven't used the /api/ distinction. The requests look like this <a href="https://disq.us/url?url=https%3A%2F%2Fgithub.com%2Fmezod%2Fmultikanban-api%2Fblob%2Fmaster%2FREADME.md%3AMELjoY2SyXmU1zQwSJVsXECGGuU&amp;cuid=1175718" rel="nofollow noopener">https://github.com/mezod/multi...</a></p><p>Therefore, my Application.php looks like follows:</p><p>$this-&gt;register(new SecurityServiceProvider(), array(<br>            'security.firewalls' =&gt; array(<br>                'main' =&gt; array(<br>                    'pattern' =&gt; '^/',<br>                    'form' =&gt; true,<br>                    'users' =&gt; $this-&gt;share(function () use ($app) {<br>                        return $app['repository.user'];<br>                    }),<br>                    'anonymous' =&gt; true,<br>                    'logout' =&gt; true,<br>                    'stateless' =&gt; true,<br>                    'http' =&gt; true,<br>                    'api_token' =&gt; true,<br>                ),<br>            )<br>        ));</p><p>        // require login for application management<br>        $this['security.access_rules'] = array(<br>            // allow anonymous API - if auth is needed, it's handled in the controller<br>            array('^/', 'IS_AUTHENTICATED_ANONYMOUSLY'),<br>        );</p><p>I'm not sure if you mean that /tokens is some kind of reserved path by Silex or similar. I have changed that by /apitokens or /api/tokens with no luck (same 401). I am not sure if it is that the route is not matched or if there's something in the config of the security that throws it off. It is a 401 Unauthorized but it is not returning any ApiProblem at all. Must be an exception thrown by Silex. But my access rules are basically accepting everything and anonymously. The ApiTokenListener is being activated, but as the Authorization is of the type "Basic XXXX" the listener just returns because he's got nothing to do there. I'll try to find it out tomorrow, but if you come up with any other idea I'll be glad to try it out!</p>
	                            </div>
	                        </div>
	                    </div>
	                </li>
	            	                <li class="dsq-comment dsq-clearfix" data-dsq-comment-id="1777134736" id="dsq-comment-1777134736">
	                    <div class="dsq-avatar dsq-tt">
	                        <a href="https://disqus.com/by/weaverryan/">
	                            	                                <img alt="" src="http://a.disquscdn.com/uploads/users/32/6480/avatar92.jpg?1482356913">
	                            	                        </a>
	                    </div>
	                    <div class="dsq-comment-body" id="dsq-comment-body-1777134736">
	                        <div class="dsq-comment-header">
	                            <span class="dsq-comment-date">2015-01-07</span>
	                            <span class="dsq-commenter-name">weaverryan</span>
	                        </div>

	                        <div id="dsq-comment-message-1777134736" class="dsq-comment-message">
	                            <div id="dsq-comment-text-1777134736" class="dsq-comment-text">
	                                <p>Hey Joan!</p><p>I hope it's this easy: are you making a request to /api/tokens or just /tokens? If you're requesting to /tokens, that doesn't exist, but it *is* a secured path, so this *could* be the issue :). And since the "api" firewall is only active for URLs under /api, sending your token will not activate the ApiTokenListener.</p><p>Let me know!</p>
	                            </div>
	                        </div>
	                    </div>
	                </li>
	            	                <li class="dsq-comment dsq-clearfix" data-dsq-comment-id="1776813988" id="dsq-comment-1776813988">
	                    <div class="dsq-avatar dsq-tt">
	                        <a href="https://disqus.com/by/joanboixados/">
	                            	                                <img alt="" src="http://a.disquscdn.com/uploads/users/11913/8926/avatar92.jpg?1412715871">
	                            	                        </a>
	                    </div>
	                    <div class="dsq-comment-body" id="dsq-comment-body-1776813988">
	                        <div class="dsq-comment-header">
	                            <span class="dsq-comment-date">2015-01-07</span>
	                            <span class="dsq-commenter-name">Joan</span>
	                        </div>

	                        <div id="dsq-comment-message-1776813988" class="dsq-comment-message">
	                            <div id="dsq-comment-text-1776813988" class="dsq-comment-text">
	                                <p>I basically copypasted your TokenController and when sending a request to /tokens the addRoutes gets executed (adding some echoes there show in the response). However the newAction function is not called, adding an echo at the beginning (before enforcing security) doesn't show up. The server returns a 401 unauthorized. I am not sure of where is this error thrown. In the ApiTokenListener I can make sure that the basic auth headers are received properly, Authorization equals something of the form "Basic c35CWETCWERC2c52" (so now I understand why the "token ABCD123" ;D). However I am not sure of if this "c35..." has to equal the encoded password in the database (it does not). Also, if Basic auth were incorrect it would fail after enforceUserSecurity and that function never gets executed so the Unauthorized must come from somewhere else. Do you have any idea of what may I be doing wrong or how could I debug here?</p><p>I did change the config at the time to register the Security Provider but it works well with all the other Controllers... i have both 'http' and 'api_token' set to true...</p><p>Thanks!</p>
	                            </div>
	                        </div>
	                    </div>
	                </li>
	            	        </ul>
	    </div>
            </div>

    <script type="text/javascript">
    var disqus_shortname = 'knpuniversity';
    var disqus_container_id = 'disqus_thread';var disqus_developer = 1;var disqus_identifier = 'course_video_creating-tokens-in-the-api';var disqus_url = 'https://knpuniversity.com/screencast/rest-ep2/creating-tokens-in-the-api';var disqus_config = function () {};

    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>

                                            </div>
                    <div class="pull-left-xs pull-right-md">
                                        <a class="btn btn-success"
           href="reuse-consistency#play">
            Next Chapter <i class="fa fa-caret-right"></i>
        </a>
    
                    </div>
                    <div class="pull-left addthis-module">
                        
    <div class="addthis_toolbox addthis_default_style js-analytics-addthis-wrapper addthis_32x32_style" addthis:url="http://knpuniversity.com/screencast/rest-ep2/creating-tokens-in-the-api" addthis:title="RESTful APIs in the Real World Course 2">
        <a class="addthis_button_preferred_1"></a>
        <a class="addthis_button_preferred_2"></a>
        <a class="addthis_button_preferred_3"></a>
        <a class="addthis_button_preferred_4"></a>
        <a class="addthis_button_compact"></a>
        <a class="addthis_counter addthis_bubble_style"></a>
    </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

<footer class="footer footer-styling">
    <div class="container">
        <div class="row">
                        <div class="col-xs-7 col-sm-4">
                <div class="row">
                    <div class="col-xs-6">
                        <ul class="list-unstyled footer-link">
                            <li><a class="knp-color-black" href="../../courses/all">All Courses</a></li>
                                                            <li><a class="knp-color-black" href="../../pricing.1">Pricing</a></li>
                                                        <li><a class="knp-color-black" href="../../faq">FAQ</a></li>
                            <li><a class="knp-color-black" href="../../training">Training</a></li>
                        </ul>
                    </div>
                    <div class="col-xs-6">
                        <ul class="list-unstyled footer-link">
                            <li><a class="knp-color-black" href="../../about">About</a></li>
                            <li><a class="knp-color-black" href="../../blog">Blog</a></li>
                            <li><a class="knp-color-black" href="../../contact">Contact Us</a></li>
                            <li>
                                <a class="knp-color-black" href="../../terms">Terms</a>
                                <span class="knp-color-black">&amp;</span>
                                <a class="knp-color-black" href="../../privacy">Privacy</a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
            <div class="hidden-xs col-sm-4">
                <p class="disclaimer">Symfony is a registered trademark of Fabien Potencier in the United States and/or other countries.
                This product is not endorsed or sponsored by Fabien Potencier.
                </p>
            </div>
            <div class="col-xs-5 col-sm-4">
                <div class="social-icons">
                    <a class="btn btn-social-icon btn-twitter" href="https://twitter.com/KnpUniversity">
                        <i class="fa fa-twitter"></i>
                    </a>
                    <a class="btn btn-social-icon btn-facebook" href="https://www.facebook.com/KnpLabs/">
                        <i class="fa fa-facebook"></i>
                    </a>
                    <a class="btn btn-social-icon btn-github" href="https://github.com/knpuniversity">
                        <i class="fa fa-github"></i>
                    </a>
                </div>
            </div>
                    </div>
    </div>
</footer>

<!-- JS -->
            <script>
        Core.analyticsVideoStatsUrl = '/api/analytics/video/duration';
    </script>

            <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>

        <script type="text/javascript">
        var _gaq = _gaq || [];
        _gaq.push(['_setAccount', 'UA-7062980-20']);
        _gaq.push(['_trackPageview']);
    </script>
    <script>
    
    </script>
    
    <script type="text/javascript">
        (function() {
            var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
            ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
            var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
        })();
    </script>
    
                <script type="text/javascript">
      (function() {
        var uv = document.createElement('script'); uv.type = 'text/javascript'; uv.async = true;
        uv.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + 'widget.uservoice.com/pOay2WLVabhXiEffbarO6Q.js';
        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(uv, s);
      })();

      UserVoice = window.UserVoice || [];
      UserVoice.push(['showTab', 'classic_widget', {
          tab_position: 'bottom-right',
          tab_label: 'Ideas or Feedback?',
          tab_color: '#005E8E'
      }]);
    </script>
        
            
        <script type="text/javascript">
    var _sf_async_config={uid:54262,domain:"knpuniversity.com",useCanonical:true};
    (function(){
      function loadChartbeat() {
        window._sf_endpt=(new Date()).getTime();
        var e = document.createElement('script');
        e.setAttribute('language', 'javascript');
        e.setAttribute('type', 'text/javascript');
        e.setAttribute('src', '//static.chartbeat.com/js/chartbeat.js');
        document.body.appendChild(e);
      }
      var oldonload = window.onload;
      window.onload = (typeof window.onload != 'function') ?
         loadChartbeat : function() { oldonload(); loadChartbeat(); };
    })();
    </script>
    
            <script>
            (function(){
                var t,i,e,n=window,o=document,a=arguments,s="script",r=["config","track","identify","visit","push","call"],c=function(){var t,i=this;for(i._e=[],t=0;r.length>t;t++)(function(t){i[t]=function(){return i._e.push([t].concat(Array.prototype.slice.call(arguments,0))),i}})(r[t])};for(n._w=n._w||{},t=0;a.length>t;t++)n._w[a[t]]=n[a[t]]=n[a[t]]||new c;i=o.createElement(s),i.async=1,i.src="//static.woopra.com/js/w.js",e=o.getElementsByTagName(s)[0],e.parentNode.insertBefore(i,e)
            })("woopra");

            woopra.config({
                domain: 'knpuniversity.com',
                download_tracking: true,
                outgoing_tracking: true
            });

                            woopra.identify({
                    userType: 'anonymous',
                    hasSubscription: 'no'
                });
                    </script>

        <script>
            woopra.track(
            'course_view_chapter',
            {"course":"rest-ep2","courseIsOwned":false,"chapter":"Creating Token Resources in the API","chapterNumber":9,"chapterIsFree":false}
        );
    </script>

        <script>
            woopra.track();
        </script>
     
        <script type="text/javascript">
    var _qevents = _qevents || [];

    (function() {
    var elem = document.createElement('script');
    elem.src = (document.location.protocol == "https:" ? "https://secure" : "http://edge") + ".quantserve.com/quant.js";
    elem.async = true;
    elem.type = "text/javascript";
    var scpt = document.getElementsByTagName('script')[0];
    scpt.parentNode.insertBefore(elem, scpt);
    })();

    _qevents.push({
    qacct:"p-8-SEHS37bhSQ0"
    });
    </script>

    <noscript>
    <div style="display:none;">
    <img src="http://pixel.quantserve.com/pixel/p-8-SEHS37bhSQ0.gif" border="0" height="1" width="1" alt="Quantcast"/>
    </div>
    </noscript>
    


    <script type="text/javascript" src="../../assets/vendor/jquery-sticky/jquery.sticky.js"></script>
    <script type="text/javascript" src="../../assets/vendor/zeroclipboard/dist/ZeroClipboard.min.js"></script>
    <script type="text/javascript" src="../../js/CodeBlocks.js"></script>
    <script type="text/javascript" src="../../bundles/knpuniversity/sphinx/js/underscore.js"></script>
    <script type="text/javascript" src="../../bundles/knpuniversity/sphinx/js/doctools.js"></script>

    <script>
        Core.courseTitle = 'RESTful APIs in the Real World Course 2';
        Core.courseId = 48
        Core.courseIsOwned = false;
        Core.courseSlug = 'rest-ep2';
                    Core.chapterTitle = 'Creating Token Resources in the API';
            Core.chapterNumber = 9;
            Core.chapterIsFree = false;
            Core.chapterSlug = 'creating-tokens-in-the-api';
        
                var DOCUMENTATION_OPTIONS = {
            URL_ROOT:    '../../',
            VERSION:     '1.0.0',
            COLLAPSE_INDEX: false,
            FILE_SUFFIX: '.html',
            HAS_SOURCE:  true
        };

        jQuery(document).ready(function() {
            // Stick left sidebar menu
            $('.js-sticker').sticky();

            var $scriptWrapper = $('.js-script-content-wrapper');
            var codeBlocks = new Core.CodeBlocks($scriptWrapper);

            var expandList = $('.js-expand-list');

            expandList.on('click', function(){
                var target = $(this).data('target');
                var $expandArea = $('#' + target);
                $expandArea.toggleClass('expanded');

                // http://stackoverflow.com/questions/2868582/click-outside-menu-to-close-in-jquery
                $(document).one('click', function closeExpandList (e){
                    if($expandArea.has(e.target).length === 0){
                        $expandArea.removeClass('expanded');
                    } else {
                        $(document).one('click', closeExpandList);
                    }
                });
            });
        });
    </script>
    <script src="http://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.0.0/highlight.min.js"></script>
<script>
    hljs.initHighlightingOnLoad();
</script>



    <script type="text/javascript">
    var addthis_share = {
        templates: {
            twitter: '{{title}} - {{url}} | via @KnpUniversity'
        }
    }
</script>
<script type="text/javascript" src="http://s7.addthis.com/js/300/addthis_widget.js#pubid=weaverryan"></script>

<script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"beacon":"bam.nr-data.net","licenseKey":"b4d8035b34","applicationID":"3720092","transactionName":"MgEBMkZVXBFXBRENWwtLIgVAXV0MGQ0LFGsQCgoQUUZBC0IfOgdbEBYQA2tHWg1B","queueTime":0,"applicationTime":564,"atts":"HkYCRA5PTx8=","errorBeacon":"bam.nr-data.net","agent":""}</script></body>
</html>
