<!DOCTYPE html>
<html lang="en">
<head prefix="og: http://ogp.me/ns#">
            <script src="https://cdn.optimizely.com/js/421270022.js"></script>
    
                    <script type="text/javascript">var _sf_startpt=(new Date()).getTime()</script>
        <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge"><script type="text/javascript">(window.NREUM||(NREUM={})).loader_config={xpid:"Vg4HUlBbGwAHVlFSDgM="};window.NREUM||(NREUM={}),__nr_require=function(t,e,n){function r(n){if(!e[n]){var o=e[n]={exports:{}};t[n][0].call(o.exports,function(e){var o=t[n][1][e];return r(o||e)},o,o.exports)}return e[n].exports}if("function"==typeof __nr_require)return __nr_require;for(var o=0;o<n.length;o++)r(n[o]);return r}({1:[function(t,e,n){function r(t){try{c.console&&console.log(t)}catch(e){}}var o,i=t("ee"),a=t(12),c={};try{o=localStorage.getItem("__nr_flags").split(","),console&&"function"==typeof console.log&&(c.console=!0,o.indexOf("dev")!==-1&&(c.dev=!0),o.indexOf("nr_dev")!==-1&&(c.nrDev=!0))}catch(s){}c.nrDev&&i.on("internal-error",function(t){r(t.stack)}),c.dev&&i.on("fn-err",function(t,e,n){r(n.stack)}),c.dev&&(r("NR AGENT IN DEVELOPMENT MODE"),r("flags: "+a(c,function(t,e){return t}).join(", ")))},{}],2:[function(t,e,n){function r(t,e,n,r,o){try{d?d-=1:i("err",[o||new UncaughtException(t,e,n)])}catch(c){try{i("ierr",[c,(new Date).getTime(),!0])}catch(s){}}return"function"==typeof f&&f.apply(this,a(arguments))}function UncaughtException(t,e,n){this.message=t||"Uncaught error with no additional information",this.sourceURL=e,this.line=n}function o(t){i("err",[t,(new Date).getTime()])}var i=t("handle"),a=t(13),c=t("ee"),s=t("loader"),f=window.onerror,u=!1,d=0;s.features.err=!0,t(1),window.onerror=r;try{throw new Error}catch(l){"stack"in l&&(t(5),t(4),"addEventListener"in window&&t(3),s.xhrWrappable&&t(6),u=!0)}c.on("fn-start",function(t,e,n){u&&(d+=1)}),c.on("fn-err",function(t,e,n){u&&(this.thrown=!0,o(n))}),c.on("fn-end",function(){u&&!this.thrown&&d>0&&(d-=1)}),c.on("internal-error",function(t){i("ierr",[t,(new Date).getTime(),!0])})},{}],3:[function(t,e,n){function r(t){for(var e=t;e&&!e.hasOwnProperty(u);)e=Object.getPrototypeOf(e);e&&o(e)}function o(t){c.inPlace(t,[u,d],"-",i)}function i(t,e){return t[1]}var a=t("ee").get("events"),c=t(14)(a,!0),s=t("gos"),f=XMLHttpRequest,u="addEventListener",d="removeEventListener";e.exports=a,"getPrototypeOf"in Object?(r(document),r(window),r(f.prototype)):f.prototype.hasOwnProperty(u)&&(o(window),o(f.prototype)),a.on(u+"-start",function(t,e){var n=t[1],r=s(n,"nr@wrapped",function(){function t(){if("function"==typeof n.handleEvent)return n.handleEvent.apply(n,arguments)}var e={object:t,"function":n}[typeof n];return e?c(e,"fn-",null,e.name||"anonymous"):n});this.wrapped=t[1]=r}),a.on(d+"-start",function(t){t[1]=this.wrapped||t[1]})},{}],4:[function(t,e,n){var r=t("ee").get("raf"),o=t(14)(r),i="equestAnimationFrame";e.exports=r,o.inPlace(window,["r"+i,"mozR"+i,"webkitR"+i,"msR"+i],"raf-"),r.on("raf-start",function(t){t[0]=o(t[0],"fn-")})},{}],5:[function(t,e,n){function r(t,e,n){t[0]=a(t[0],"fn-",null,n)}function o(t,e,n){this.method=n,this.timerDuration="number"==typeof t[1]?t[1]:0,t[0]=a(t[0],"fn-",this,n)}var i=t("ee").get("timer"),a=t(14)(i),c="setTimeout",s="setInterval",f="clearTimeout",u="-start",d="-";e.exports=i,a.inPlace(window,[c,"setImmediate"],c+d),a.inPlace(window,[s],s+d),a.inPlace(window,[f,"clearImmediate"],f+d),i.on(s+u,r),i.on(c+u,o)},{}],6:[function(t,e,n){function r(t,e){d.inPlace(e,["onreadystatechange"],"fn-",c)}function o(){var t=this,e=u.context(t);t.readyState>3&&!e.resolved&&(e.resolved=!0,u.emit("xhr-resolved",[],t)),d.inPlace(t,v,"fn-",c)}function i(t){y.push(t),h&&(w=-w,b.data=w)}function a(){for(var t=0;t<y.length;t++)r([],y[t]);y.length&&(y=[])}function c(t,e){return e}function s(t,e){for(var n in t)e[n]=t[n];return e}t(3);var f=t("ee"),u=f.get("xhr"),d=t(14)(u),l=NREUM.o,p=l.XHR,h=l.MO,m="readystatechange",v=["onload","onerror","onabort","onloadstart","onloadend","onprogress","ontimeout"],y=[];e.exports=u;var g=window.XMLHttpRequest=function(t){var e=new p(t);try{u.emit("new-xhr",[e],e),e.addEventListener(m,o,!1)}catch(n){try{u.emit("internal-error",[n])}catch(r){}}return e};if(s(p,g),g.prototype=p.prototype,d.inPlace(g.prototype,["open","send"],"-xhr-",c),u.on("send-xhr-start",function(t,e){r(t,e),i(e)}),u.on("open-xhr-start",r),h){var w=1,b=document.createTextNode(w);new h(a).observe(b,{characterData:!0})}else f.on("fn-end",function(t){t[0]&&t[0].type===m||a()})},{}],7:[function(t,e,n){function r(t){var e=this.params,n=this.metrics;if(!this.ended){this.ended=!0;for(var r=0;r<d;r++)t.removeEventListener(u[r],this.listener,!1);if(!e.aborted){if(n.duration=(new Date).getTime()-this.startTime,4===t.readyState){e.status=t.status;var i=o(t,this.lastSize);if(i&&(n.rxSize=i),this.sameOrigin){var a=t.getResponseHeader("X-NewRelic-App-Data");a&&(e.cat=a.split(", ").pop())}}else e.status=0;n.cbTime=this.cbTime,f.emit("xhr-done",[t],t),c("xhr",[e,n,this.startTime])}}}function o(t,e){var n=t.responseType;if("json"===n&&null!==e)return e;var r="arraybuffer"===n||"blob"===n||"json"===n?t.response:t.responseText;return h(r)}function i(t,e){var n=s(e),r=t.params;r.host=n.hostname+":"+n.port,r.pathname=n.pathname,t.sameOrigin=n.sameOrigin}var a=t("loader");if(a.xhrWrappable){var c=t("handle"),s=t(8),f=t("ee"),u=["load","error","abort","timeout"],d=u.length,l=t("id"),p=t(11),h=t(10),m=window.XMLHttpRequest;a.features.xhr=!0,t(6),f.on("new-xhr",function(t){var e=this;e.totalCbs=0,e.called=0,e.cbTime=0,e.end=r,e.ended=!1,e.xhrGuids={},e.lastSize=null,p&&(p>34||p<10)||window.opera||t.addEventListener("progress",function(t){e.lastSize=t.loaded},!1)}),f.on("open-xhr-start",function(t){this.params={method:t[0]},i(this,t[1]),this.metrics={}}),f.on("open-xhr-end",function(t,e){"loader_config"in NREUM&&"xpid"in NREUM.loader_config&&this.sameOrigin&&e.setRequestHeader("X-NewRelic-ID",NREUM.loader_config.xpid)}),f.on("send-xhr-start",function(t,e){var n=this.metrics,r=t[0],o=this;if(n&&r){var i=h(r);i&&(n.txSize=i)}this.startTime=(new Date).getTime(),this.listener=function(t){try{"abort"===t.type&&(o.params.aborted=!0),("load"!==t.type||o.called===o.totalCbs&&(o.onloadCalled||"function"!=typeof e.onload))&&o.end(e)}catch(n){try{f.emit("internal-error",[n])}catch(r){}}};for(var a=0;a<d;a++)e.addEventListener(u[a],this.listener,!1)}),f.on("xhr-cb-time",function(t,e,n){this.cbTime+=t,e?this.onloadCalled=!0:this.called+=1,this.called!==this.totalCbs||!this.onloadCalled&&"function"==typeof n.onload||this.end(n)}),f.on("xhr-load-added",function(t,e){var n=""+l(t)+!!e;this.xhrGuids&&!this.xhrGuids[n]&&(this.xhrGuids[n]=!0,this.totalCbs+=1)}),f.on("xhr-load-removed",function(t,e){var n=""+l(t)+!!e;this.xhrGuids&&this.xhrGuids[n]&&(delete this.xhrGuids[n],this.totalCbs-=1)}),f.on("addEventListener-end",function(t,e){e instanceof m&&"load"===t[0]&&f.emit("xhr-load-added",[t[1],t[2]],e)}),f.on("removeEventListener-end",function(t,e){e instanceof m&&"load"===t[0]&&f.emit("xhr-load-removed",[t[1],t[2]],e)}),f.on("fn-start",function(t,e,n){e instanceof m&&("onload"===n&&(this.onload=!0),("load"===(t[0]&&t[0].type)||this.onload)&&(this.xhrCbStart=(new Date).getTime()))}),f.on("fn-end",function(t,e){this.xhrCbStart&&f.emit("xhr-cb-time",[(new Date).getTime()-this.xhrCbStart,this.onload,e],e)})}},{}],8:[function(t,e,n){e.exports=function(t){var e=document.createElement("a"),n=window.location,r={};e.href=t,r.port=e.port;var o=e.href.split("://");!r.port&&o[1]&&(r.port=o[1].split("/")[0].split("@").pop().split(":")[1]),r.port&&"0"!==r.port||(r.port="https"===o[0]?"443":"80"),r.hostname=e.hostname||n.hostname,r.pathname=e.pathname,r.protocol=o[0],"/"!==r.pathname.charAt(0)&&(r.pathname="/"+r.pathname);var i=!e.protocol||":"===e.protocol||e.protocol===n.protocol,a=e.hostname===document.domain&&e.port===n.port;return r.sameOrigin=i&&(!e.hostname||a),r}},{}],9:[function(t,e,n){function r(){}function o(t,e,n){return function(){return i(t,[(new Date).getTime()].concat(c(arguments)),e?null:this,n),e?void 0:this}}var i=t("handle"),a=t(12),c=t(13),s=t("ee").get("tracer"),f=NREUM;"undefined"==typeof window.newrelic&&(newrelic=f);var u=["setPageViewName","setCustomAttribute","setErrorHandler","finished","addToTrace","inlineHit"],d="api-",l=d+"ixn-";a(u,function(t,e){f[e]=o(d+e,!0,"api")}),f.addPageAction=o(d+"addPageAction",!0),f.setCurrentRouteName=o(d+"routeName",!0),e.exports=newrelic,f.interaction=function(){return(new r).get()};var p=r.prototype={createTracer:function(t,e){var n={},r=this,o="function"==typeof e;return i(l+"tracer",[Date.now(),t,n],r),function(){if(s.emit((o?"":"no-")+"fn-start",[Date.now(),r,o],n),o)try{return e.apply(this,arguments)}finally{s.emit("fn-end",[Date.now()],n)}}}};a("setName,setAttribute,save,ignore,onEnd,getContext,end,get".split(","),function(t,e){p[e]=o(l+e)}),newrelic.noticeError=function(t){"string"==typeof t&&(t=new Error(t)),i("err",[t,(new Date).getTime()])}},{}],10:[function(t,e,n){e.exports=function(t){if("string"==typeof t&&t.length)return t.length;if("object"==typeof t){if("undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer&&t.byteLength)return t.byteLength;if("undefined"!=typeof Blob&&t instanceof Blob&&t.size)return t.size;if(!("undefined"!=typeof FormData&&t instanceof FormData))try{return JSON.stringify(t).length}catch(e){return}}}},{}],11:[function(t,e,n){var r=0,o=navigator.userAgent.match(/Firefox[\/\s](\d+\.\d+)/);o&&(r=+o[1]),e.exports=r},{}],12:[function(t,e,n){function r(t,e){var n=[],r="",i=0;for(r in t)o.call(t,r)&&(n[i]=e(r,t[r]),i+=1);return n}var o=Object.prototype.hasOwnProperty;e.exports=r},{}],13:[function(t,e,n){function r(t,e,n){e||(e=0),"undefined"==typeof n&&(n=t?t.length:0);for(var r=-1,o=n-e||0,i=Array(o<0?0:o);++r<o;)i[r]=t[e+r];return i}e.exports=r},{}],14:[function(t,e,n){function r(t){return!(t&&t instanceof Function&&t.apply&&!t[a])}var o=t("ee"),i=t(13),a="nr@original",c=Object.prototype.hasOwnProperty,s=!1;e.exports=function(t,e){function n(t,e,n,o){function nrWrapper(){var r,a,c,s;try{a=this,r=i(arguments),c="function"==typeof n?n(r,a):n||{}}catch(f){l([f,"",[r,a,o],c])}u(e+"start",[r,a,o],c);try{return s=t.apply(a,r)}catch(d){throw u(e+"err",[r,a,d],c),d}finally{u(e+"end",[r,a,s],c)}}return r(t)?t:(e||(e=""),nrWrapper[a]=t,d(t,nrWrapper),nrWrapper)}function f(t,e,o,i){o||(o="");var a,c,s,f="-"===o.charAt(0);for(s=0;s<e.length;s++)c=e[s],a=t[c],r(a)||(t[c]=n(a,f?c+o:o,i,c))}function u(n,r,o){if(!s||e){var i=s;s=!0;try{t.emit(n,r,o)}catch(a){l([a,n,r,o])}s=i}}function d(t,e){if(Object.defineProperty&&Object.keys)try{var n=Object.keys(t);return n.forEach(function(n){Object.defineProperty(e,n,{get:function(){return t[n]},set:function(e){return t[n]=e,e}})}),e}catch(r){l([r])}for(var o in t)c.call(t,o)&&(e[o]=t[o]);return e}function l(e){try{t.emit("internal-error",e)}catch(n){}}return t||(t=o),n.inPlace=f,n.flag=a,n}},{}],ee:[function(t,e,n){function r(){}function o(t){function e(t){return t&&t instanceof r?t:t?s(t,c,i):i()}function n(n,r,o){if(!l.aborted){t&&t(n,r,o);for(var i=e(o),a=h(n),c=a.length,s=0;s<c;s++)a[s].apply(i,r);var f=u[g[n]];return f&&f.push([w,n,r,i]),i}}function p(t,e){y[t]=h(t).concat(e)}function h(t){return y[t]||[]}function m(t){return d[t]=d[t]||o(n)}function v(t,e){f(t,function(t,n){e=e||"feature",g[n]=e,e in u||(u[e]=[])})}var y={},g={},w={on:p,emit:n,get:m,listeners:h,context:e,buffer:v,abort:a,aborted:!1};return w}function i(){return new r}function a(){(u.api||u.feature)&&(l.aborted=!0,u=l.backlog={})}var c="nr@context",s=t("gos"),f=t(12),u={},d={},l=e.exports=o();l.backlog=u},{}],gos:[function(t,e,n){function r(t,e,n){if(o.call(t,e))return t[e];var r=n();if(Object.defineProperty&&Object.keys)try{return Object.defineProperty(t,e,{value:r,writable:!0,enumerable:!1}),r}catch(i){}return t[e]=r,r}var o=Object.prototype.hasOwnProperty;e.exports=r},{}],handle:[function(t,e,n){function r(t,e,n,r){o.buffer([t],r),o.emit(t,e,n)}var o=t("ee").get("handle");e.exports=r,r.ee=o},{}],id:[function(t,e,n){function r(t){var e=typeof t;return!t||"object"!==e&&"function"!==e?-1:t===window?0:a(t,i,function(){return o++})}var o=1,i="nr@id",a=t("gos");e.exports=r},{}],loader:[function(t,e,n){function r(){if(!b++){var t=w.info=NREUM.info,e=d.getElementsByTagName("script")[0];if(setTimeout(f.abort,3e4),!(t&&t.licenseKey&&t.applicationID&&e))return f.abort();s(y,function(e,n){t[e]||(t[e]=n)}),c("mark",["onload",a()],null,"api");var n=d.createElement("script");n.src="https://"+t.agent,e.parentNode.insertBefore(n,e)}}function o(){"complete"===d.readyState&&i()}function i(){c("mark",["domContent",a()],null,"api")}function a(){return(new Date).getTime()}var c=t("handle"),s=t(12),f=t("ee"),u=window,d=u.document,l="addEventListener",p="attachEvent",h=u.XMLHttpRequest,m=h&&h.prototype;NREUM.o={ST:setTimeout,CT:clearTimeout,XHR:h,REQ:u.Request,EV:u.Event,PR:u.Promise,MO:u.MutationObserver},t(9);var v=""+location,y={beacon:"bam.nr-data.net",errorBeacon:"bam.nr-data.net",agent:"js-agent.newrelic.com/nr-998.min.js"},g=h&&m&&m[l]&&!/CriOS/.test(navigator.userAgent),w=e.exports={offset:a(),origin:v,features:{},xhrWrappable:g};d[l]?(d[l]("DOMContentLoaded",i,!1),u[l]("load",r,!1)):(d[p]("onreadystatechange",o),u[p]("onload",r)),c("mark",["firstbyte",a()],null,"api");var b=0},{}]},{},["loader",2,7]);</script>
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <title>Journey to the Center of Symfony: The Dependency Injection Container Video Tutorial Screencast | KnpUniversity</title>

            <link href="../../builds/main-db6835bf19d99bcc09032789f3bd39e4.css" rel="stylesheet">

        <link href='https://fonts.googleapis.com/css?family=Rokkitt' rel='stylesheet' type='text/css'>
        <link href='https://fonts.googleapis.com/css?family=Open+Sans:400,700' rel='stylesheet' type='text/css'>
        <link href='https://fonts.googleapis.com/css?family=Cedarville+Cursive' rel='stylesheet' type='text/css'>
    
                    <script src="../../bundles/fosjsrouting/js/router.js"></script>

        <script src="../../builds/main-1dfa89b76a105f9c2d98.js"></script>
        <script src="../../js/routing?callback=fos.Router.setData"></script>
            
    <link rel="alternate" type="application/rss+xml" title="Blog feed with technical articles around PHP and screencast and tutorial updates from KnpUniversity.com" href="http://feeds.feedburner.com/knpuniversity" />

    <meta name="description" content="PHP and Symfony Tutorial Screencasts - with free videos, scripts, and code downloads!">

    <meta property="og:site_name" content="KnpUniversity - PHP and Symfony Video Tutorial Screencasts">
    <meta name="twitter:site" content="@KnpUniversity"><link rel="shortcut icon" href="../../assets/images/favicon.ico">
    <link rel="icon" type="image/png" href="../../assets/images/favicon.png">

    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
    <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->    <meta property="og:title" content="Journey to the Center of Symfony: The Dependency Injection Container Video Tutorial Screencast">
<meta property="og:description" content="Let&#039;s not just use Symfony, let&#039;s conquer it! In this series, we&#039;re
going to rip open the code that builds and boots Symfony&#039;s Container
to see how it really works. Yes, this is geeky, and yes it&#039;s sweet!
Besides the occassional dinosaur,
expect to do the following on our adventure:

Build a container from scratch
Master the ContainerBuilder and Definition objects: the backbones to the container
See how Definitions are built with YAML
Dump the container to PHP code and use it
See how Symfony builds the container (woh)
Learn how DependencyInjection Extension classes work (i">
<meta property="og:url" content="http://knpuniversity.com/screencast/symfony-journey-di">
    <meta property="og:image" content="http://knpuniversity.com/imagine/course_video_poster_large/uploads/screencast/symfony-journey-di:2069840da60f17835afd095e72296700f2d9b670/sf2-journey-container.png">

<meta name="twitter:card" content="summary">


            </head>
<body data-user-id="" >
<nav class="navbar navbar-inverse nav-margin ">
    <div class="container">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle toggle-button collapsed" data-toggle="collapse" data-target="#js-navbar" aria-expanded="false" aria-controls="js-navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a href="../../logout" class="navbar-brand">
                <span class="knp-color-blue">Knp</span>
                <span class="knp-color-white">University</span>
            </a>
        </div>
        <form class="navbar-form navbar-left navbar-form-border" role="search" method="GET" action="http://knpuniversity.com/search">
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Search Tutorials" value="" name="q">

                <div class="input-group-btn">
                    <button class="btn btn-default" type="submit">
                        <i class="fa fa-search"></i>
                    </button>
                </div>
            </div>
        </form>
        <div id="js-navbar" class="collapse-fix collapse navbar-right navbar-collapse">
            

<ul class="nav navbar-nav nav-narrowerOnSmall">
            <li><a href="../../checkout/subscription/team_yearly/5" title="Cart"><i class="fa fa-shopping-cart"></i></a></li>
        <li class="dropdown"><a href="resume#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Tutorials <i class="fa fa-angle-down"></i></a>
        <ul class="dropdown-menu">
          <li><a href="../../tracks.1">Tracks</a></li>
          <li><a href="../../courses/all">All Courses</a></li>
        </ul>
    </li>
            <li><a href="../../pricing.1">Pricing</a></li>
        <li><a href="../../training">Training</a></li>
                <li class="visible-xs"><a href="../../logout">My Profile</a></li>
        <li class="visible-xs"><a href="../../logout">Sign Out</a></li>

            <li><a href="../../login.1">Log In</a></li>
        <li class="btn btn-sm btn-warning signup-btn"><a class="signup" href="../../signup/index.html">Sign Up</a></li>
    </ul>

        </div>
    </div>
</nav>


    





<div class="tut-hero" style="background-color: #9B9B9B;">
<div class="arrow-right"  style="border-left-color: #747474;"></div>
    <div class="container">
        <div class="row">
            <div class="col-xs-12 col-sm-6 col-md-8">
                <h1 class="knp-color-white tuts-header-font tuts-header-font-tutorial-overview">Journey to the Center of Symfony: The Dependency Injection Container</h1>
            </div>
            <div class="col-xs-12 col-sm-6 col-md-4">
                <section class="extra-margin-buttons" id="course-subscription-wrapper">
                                                                                                
                        <a href="container-in-the-wild#play" class="btn btn-success">
                            <i class="fa fa-play-circle-o"></i>
                            Play Tutorial
                        </a>
                    
                                            <a href="../../pricing/symfony-journey-di"  class="btn btn-success">
                            <i class="fa fa-shopping-cart"></i> Add to Cart
                        </a>
                                    </section>
                <section class="tuts-sub-header tuts-sub-header-tutorial-overview">
                                                        </section>
            </div>
        </div>
    </div>
</div>

    <div class="container">
        <div class="row">
                        <div class="col-xs-12 col-sm-6">
                <h3 class="course-header-extra-margin account-header course-overview-header">Chapters</h3>

                                
                <div class="tut-overview-list">
                                                                    <h4>
                            You're <span class="course-overview-progress">0%</span> through this course
                                                            - get started!
                                                    </h4>
                            <div class="watched-tut-progress-container watched-tut-progress-container-overview">
        <div class="watched-tut-progress-overview" style="width: 0%; margin-right: 100%;" title="0% complete"><span class="profile-progress-title">0%</span></div>
    </div>

                    
                    
                        
    
    <!-- Table of contents -->
    <div class="chapter-list">
        <ul class="list-unstyled">
            
                
                                <li class="title chapter-list-item ">
            <a href="container-in-the-wild" class="">
                <div class="row">
                    <div class="col-xs-9">
                                                1.
                        Creating a Container in the Wild
                                            </div>

                                    <div class="col-xs-3 text-right">
                        <span> 5:44</span>
                    </div>
                                </div>
            </a>
            <div class="row">
                <div class="col-xs-12">
                                    </div>
            </div>
        </li>


            
                
                                <li class="title chapter-list-item ">
            <a href="definition" class="">
                <div class="row">
                    <div class="col-xs-9">
                                                2.
                        Definitions: Teach the Container
                                            </div>

                                    <div class="col-xs-3 text-right">
                        <span> 4:14</span>
                    </div>
                                </div>
            </a>
            <div class="row">
                <div class="col-xs-12">
                                    </div>
            </div>
        </li>


            
                
                                <li class="title chapter-list-item ">
            <a href="definition-unlocked" class="">
                <div class="row">
                    <div class="col-xs-9">
                                                3.
                        Definition Unlocked
                                            </div>

                                    <div class="col-xs-3 text-right">
                        <span> 4:05</span>
                    </div>
                                </div>
            </a>
            <div class="row">
                <div class="col-xs-12">
                                    </div>
            </div>
        </li>


            
                
                                <li class="title chapter-list-item ">
            <a href="yaml" class="">
                <div class="row">
                    <div class="col-xs-9">
                                                4.
                        Yaml for Service Definitions
                                            </div>

                                    <div class="col-xs-3 text-right">
                        <span> 5:01</span>
                    </div>
                                </div>
            </a>
            <div class="row">
                <div class="col-xs-12">
                                    </div>
            </div>
        </li>


            
                
                                <li class="title chapter-list-item ">
            <a href="parameters" class="">
                <div class="row">
                    <div class="col-xs-9">
                                                5.
                        Parameters
                                            </div>

                                    <div class="col-xs-3 text-right">
                        <span> 3:29</span>
                    </div>
                                </div>
            </a>
            <div class="row">
                <div class="col-xs-12">
                                    </div>
            </div>
        </li>


            
                
                                <li class="title chapter-list-item ">
            <a href="dumper" class="">
                <div class="row">
                    <div class="col-xs-9">
                                                6.
                        The Container Dumper
                                            </div>

                                    <div class="col-xs-3 text-right">
                        <span> 6:04</span>
                    </div>
                                </div>
            </a>
            <div class="row">
                <div class="col-xs-12">
                                    </div>
            </div>
        </li>


            
                
                                <li class="title chapter-list-item ">
            <a href="symfony-builds-the-container" class="">
                <div class="row">
                    <div class="col-xs-9">
                                                7.
                        How Symfony Builds the Container
                                            </div>

                                    <div class="col-xs-3 text-right">
                        <span> 6:42</span>
                    </div>
                                </div>
            </a>
            <div class="row">
                <div class="col-xs-12">
                                    </div>
            </div>
        </li>


            
                
                                <li class="title chapter-list-item ">
            <a href="dependency-injection-extensions" class="">
                <div class="row">
                    <div class="col-xs-9">
                                                8.
                        Dependency Injection Extensions
                                            </div>

                                    <div class="col-xs-3 text-right">
                        <span> 7:08</span>
                    </div>
                                </div>
            </a>
            <div class="row">
                <div class="col-xs-12">
                                    </div>
            </div>
        </li>


            
                
                                <li class="title chapter-list-item ">
            <a href="compiler-passes" class="">
                <div class="row">
                    <div class="col-xs-9">
                                                9.
                        Compiler Passes
                                            </div>

                                    <div class="col-xs-3 text-right">
                        <span> 5:34</span>
                    </div>
                                </div>
            </a>
            <div class="row">
                <div class="col-xs-12">
                                    </div>
            </div>
        </li>


                    </ul>
    </div>

    
                </div>
            </div>
            
            <div class="col-xs-12 col-sm-6">
                                                    <h3 class="course-header-extra-margin account-header course-overview-header">What you'll be learning</h3>
                
                

                <div class="course-overview summary"><p>Let's not just <em>use</em> Symfony, let's conquer it! In this series, we're
going to rip open the code that builds and boots Symfony's Container
to see how it really works. Yes, this is geeky, and yes it's sweet!</p>
<p>Besides the occassional <a href="http://upload.wikimedia.org/wikipedia/commons/a/a0/Amazing_Stories_June_1926.jpg">dinosaur</a>,
expect to do the following on our adventure:</p>
<ul>
<li>Build a container from scratch</li>
<li>Master the <strong>ContainerBuilder</strong> and <strong>Definition</strong> objects: the backbones to the container</li>
<li>See how Definitions are built with YAML</li>
<li>Dump the container to PHP code and use it</li>
<li>See how Symfony <em>builds</em> the container (woh)</li>
<li>Learn how DependencyInjection Extension classes work (i.e. the guys who process all that <code>config.yml</code> stuff)</li>
<li>Discover existing compiler passes and create your own</li>
</ul>
</div>

                                    <div class="related-courses">
                        <h3 class="course-header-extra-margin account-header">
                            Go through <em>all</em> the courses in
                            <a href="../tag/symfony#go-deep">Symfony 3: Go Deep</a>!
                        </h3>
                        <ol>
                                                            <li>
                                    <a href="../symfony-journey/resume">
                                        <img class="img-circle related-courses-img" src="../../imagine/course_tiles_outbound/uploads/screencast/symfony-journey:c7b574fe544fb7bbc1271c944cd04846d13f8156/sf2-journey-kernel.png">Journey to the Center of Symfony: HttpKernel Request-Response
                                    </a>
                                </li>
                                                            <li>
                                    <a href="resume">
                                        <img class="img-circle related-courses-img" src="../../imagine/course_tiles_outbound/uploads/screencast/symfony-journey-di:2069840da60f17835afd095e72296700f2d9b670/sf2-journey-container.png">Journey to the Center of Symfony: The Dependency Injection Container
                                    </a>
                                </li>
                                                    </ol>
                    </div>
                
                <div>
                    <hr>
                    <h3>Your Guides</h3>
                                            <a href="https://github.com/weaverryan" target="_blank">
                            <img title="Ryan Weaver" data-placement="bottom" class="img-circle contrib-img js-tooltip" src="https://avatars.githubusercontent.com/u/121003?v=3&amp;s=200" alt="Ryan Weaver">
                        </a>
                                            <a href="https://github.com/Leannapelham" target="_blank">
                            <img title="Leanna Pelham" data-placement="bottom" class="img-circle contrib-img js-tooltip" src="https://avatars.githubusercontent.com/u/777948?v=3&amp;s=200" alt="Leanna Pelham">
                        </a>
                                    </div>
            </div>
        </div>

        <div class="row">
            <div class="col-xs-12">
                <h3>Questions? Conversation?</h3>
                                                            <div id="disqus_thread">
                <style type="text/css">
            #dsq-comments {padding: 10px 0 0}
            .dsq-comment {position: relative;clear: both;margin: 0 0 1.5em;}
            .dsq-avatar {left: 0;position: absolute;}
            .dsq-avatar img {border: 0 none;border-radius: 3px;height: 36px;width: 36px;}
            .dsq-comment-body {padding: 0 0 0 46px;}
            .dsq-comment-header {border: 1px solid rgba(0, 0, 0, 0.15);border-radius: 3px;font-size: 13px;line-height: 14px;margin: 0 0 1em;max-height: 36px;overflow: hidden;padding: 10px;position: relative;text-overflow: ellipsis;white-space: nowrap;}
            .dsq-comment-message {word-wrap: break-word;}
            .dsq-comment-message {line-height: 1.5em;margin: 0 0 1em;}
            .dsq-comment-text {display: inline;}
            .dsq-comment-date {float: right;font-size: 90%;margin: 0 12px 0 0;}
        </style>

	    <div id="dsq-content">
	        <ul id="dsq-comments">
	            	                <li class="dsq-comment dsq-clearfix" data-dsq-comment-id="3053721889" id="dsq-comment-3053721889">
	                    <div class="dsq-avatar dsq-tt">
	                        <a href="https://disqus.com/by/weaverryan/">
	                            	                                <img alt="" src="http://a.disquscdn.com/uploads/users/32/6480/avatar92.jpg?1482356913">
	                            	                        </a>
	                    </div>
	                    <div class="dsq-comment-body" id="dsq-comment-body-3053721889">
	                        <div class="dsq-comment-header">
	                            <span class="dsq-comment-date">2016-12-15</span>
	                            <span class="dsq-commenter-name">weaverryan</span>
	                        </div>

	                        <div id="dsq-comment-message-3053721889" class="dsq-comment-message">
	                            <div id="dsq-comment-text-3053721889" class="dsq-comment-text">
	                                <p>Hey Eddy!</p><p>Yea, these are all good! Some of them are "softer" question - i.e. not just "how" to use something, but the *when* and when not to, etc. These are a bit harder to answer, well, other than trying to make screencasts that show as many examples a possible. But, these are really interesting, so let me address a few right here:</p><p>1) About Symfony being service-oriented, you're absolutely right. And actually, this is entirely on purpose, and <code>$service-&gt;driveToCustomer($car)</code> is generally considered to be superior to <code>$car-&gt;driveToCustomer()</code>. I'm not sure what you meant by more procedural, however - both lines end up being a method call, just a different method call. The reason this is "better" is really two things. First, it's just a by-product of no longer using global variables. If "driving" requires us to need a database call, then we can't do that inside of Car, unless we inject the database connection. So, instead of saying "let's inject services into *all* objects if they need them", we instead organize classes into two types: simple classes that only hold data and do (almost) no work, and classes that hold no data (maybe just some tiny configuration) and do work. That little philosophy just ends up cleaning a lot of code. Second, if you have <code>$transportationManager-&gt;driveToCustomer($car, $customer)</code>, it's quite possibly a bit more flexible. For example, I could very easily add another method <code>$transportationManager-&gt;walkToCustomer($person, $customer)</code>. Probably, a lot of the logic between these two methods/actions would be shared. But, if we had buried it into Car, then we'd need to do some more work to also suppose this in Person. Anyways, I don't know if this really gets at your question, but hopefully it does! :)</p><p>2) About Bundles: yes! In a perfect world, if I wanted to share some code, I would do two things: (A) I would put all my PHP classes that I want to share into a directory and release just that as a library. Then, anyone - Symfony or not - could use this. Then (B) I would create another directory and include just the Symfony-specific configuration needed to integrate those classes into Symfony. This bundle would have the library has a dependency. And actually, this *does* happen out in the real-world - e.g. <a href="https://disq.us/url?url=https%3A%2F%2Fgithub.com%2Fknplabs%2Fknpmenu%3AfFxt4wMOjT19FmVxfPZkQNf0Wik&amp;cuid=1175718" rel="nofollow noopener">https://github.com/knplabs/knp...</a> and <a href="https://disq.us/url?url=https%3A%2F%2Fgithub.com%2Fknplabs%2Fknpmenubundle%3AkTqg326HGD7g4XSMdLqJIEzz25U&amp;cuid=1175718" rel="nofollow noopener">https://github.com/knplabs/knp...</a>. It's an oversimplification, but for the most part, the only purpose of a bundle is to allow for an automatic way for those PHP classes to be registered as services into the container.</p><p>3) About Doctrine and switching from MySQL to something else. Really, only switching from MySQL to some other relational database (e.g Postgresql) is supported. However, in theory, Doctrine's ODM (which talks to document databases) and the Doctrine ORM share many interfaces, like the "ObjectManager" - <a href="https://disq.us/url?url=https%3A%2F%2Fgithub.com%2Fdoctrine%2Fcommon%2Fblob%2Fmaster%2Flib%2FDoctrine%2FCommon%2FPersistence%2FObjectManager.php%3ATY1Prlmwh-7i3m5GUCLO2eHLmvQ&amp;cuid=1175718" rel="nofollow noopener">https://github.com/doctrine/co...</a>. So, *technically* - though it's not as simple as this, these DB types are quite different - if you only relied on the methods in the ObjectManager and other shared interfaces, you could switch. Heck, there's even an OXM, which in fact does use XML as a backend: <a href="https://disq.us/url?url=https%3A%2F%2Fgithub.com%2Fdoctrine%2Foxm%3AfnSVkvrD53fBk2driJRP1vAFLqI&amp;cuid=1175718" rel="nofollow noopener">https://github.com/doctrine/ox...</a></p><p>4) Events! Ah, this is a GREAT question, and so subjective. I rarely use them in my projects - they make your code a bit harder to read, and since it is YOUR code, you could just write the code you need where you need it, instead of dispatching an event and attaching multiple listeners. However, I know some companies that use events a lot in their code. The slam dunk for event usage is in re-usable code: it allows you to add hook points, because you of course have no idea what the user might need to do in that spot. We DO use events in a few places however. Sometimes, after something happens in your code, you need to do many, seemingly unrelated things afterwards. I use events here. Let me give you an example: on KnpU, after a user completes a challenge or video, we dispatch an event (e.g. user.challenge_completed or user.video_completed). Then, we have several listeners that check for several different, seemingly unrelated things - e.g. checking to see if a course is now completed, or if a badge should be awarded. Without events, I would need to check for both of these things... in both places (i.e. after a challenge is completed and after a video is completed).</p><p>Phew! I hope this helps - it's fun for me to think about these things - great question!</p>
	                            </div>
	                        </div>
	                    </div>
	                </li>
	            	                <li class="dsq-comment dsq-clearfix" data-dsq-comment-id="3046671245" id="dsq-comment-3046671245">
	                    <div class="dsq-avatar dsq-tt">
	                        <a href="https://disqus.com/by/eddydeboer/">
	                            	                                <img alt="" src="http://a.disquscdn.com/uploads/users/10245/2401/avatar92.jpg?1481454295">
	                            	                        </a>
	                    </div>
	                    <div class="dsq-comment-body" id="dsq-comment-body-3046671245">
	                        <div class="dsq-comment-header">
	                            <span class="dsq-comment-date">2016-12-11</span>
	                            <span class="dsq-commenter-name">Eddy de Boer</span>
	                        </div>

	                        <div id="dsq-comment-message-3046671245" class="dsq-comment-message">
	                            <div id="dsq-comment-text-3046671245" class="dsq-comment-text">
	                                <p>I was thinking about the following --but maybe there are already tutorials about the topics, pls correct me--:<br>- Doctrine: what does really happen behind the scenes?<br>- OO: Symfony is service oriented, making entities, our domain layer, empty bags, hence forcing a more procedural style of programming (e.g.: $service-&gt;driveToCustomer($car) instead of $car-&gt;driveToCustomer()), I would love to hear the thoughts on a Symfony guru on that one<br>- Bundles are all about re-use, but they can mostly be re-used in Symfony systems. Is there a way to make them more generic?<br>- Doctrine: how to switch from mysql to, let's say something wild, Document Database, or XML?<br>- Events: when to use events? And: when not to?</p><p>Thanks so far!</p>
	                            </div>
	                        </div>
	                    </div>
	                </li>
	            	                <li class="dsq-comment dsq-clearfix" data-dsq-comment-id="3046090615" id="dsq-comment-3046090615">
	                    <div class="dsq-avatar dsq-tt">
	                        <a href="https://disqus.com/by/weaverryan/">
	                            	                                <img alt="" src="http://a.disquscdn.com/uploads/users/32/6480/avatar92.jpg?1482356913">
	                            	                        </a>
	                    </div>
	                    <div class="dsq-comment-body" id="dsq-comment-body-3046090615">
	                        <div class="dsq-comment-header">
	                            <span class="dsq-comment-date">2016-12-10</span>
	                            <span class="dsq-commenter-name">weaverryan</span>
	                        </div>

	                        <div id="dsq-comment-message-3046090615" class="dsq-comment-message">
	                            <div id="dsq-comment-text-3046090615" class="dsq-comment-text">
	                                <p>Hey Eddy!</p><p>Ah, so glad you like them! These were my favorite to write - I *love* this stuff. We don't have any other ones planned... but mostly because I'm not sure what other parts of Symfony would lend themselves to going "deep" like this. The other most complex components, forms and security, are covered really well in our main Symfony series. Anything you had in mind? I might be totally overlooking something really interesting.</p><p>Cheers!</p>
	                            </div>
	                        </div>
	                    </div>
	                </li>
	            	                <li class="dsq-comment dsq-clearfix" data-dsq-comment-id="3045490890" id="dsq-comment-3045490890">
	                    <div class="dsq-avatar dsq-tt">
	                        <a href="https://disqus.com/by/eddydeboer/">
	                            	                                <img alt="" src="http://a.disquscdn.com/uploads/users/10245/2401/avatar92.jpg?1481454295">
	                            	                        </a>
	                    </div>
	                    <div class="dsq-comment-body" id="dsq-comment-body-3045490890">
	                        <div class="dsq-comment-header">
	                            <span class="dsq-comment-date">2016-12-10</span>
	                            <span class="dsq-commenter-name">Eddy de Boer</span>
	                        </div>

	                        <div id="dsq-comment-message-3045490890" class="dsq-comment-message">
	                            <div id="dsq-comment-text-3045490890" class="dsq-comment-text">
	                                <p>Thanks for this tutorial, I find the 'Go deep' ones very interesting...so far there are only 2. Any plans to have more in the near future?</p>
	                            </div>
	                        </div>
	                    </div>
	                </li>
	            	                <li class="dsq-comment dsq-clearfix" data-dsq-comment-id="2926592613" id="dsq-comment-2926592613">
	                    <div class="dsq-avatar dsq-tt">
	                        <a href="https://disqus.com/by/weaverryan/">
	                            	                                <img alt="" src="http://a.disquscdn.com/uploads/users/32/6480/avatar92.jpg?1482356913">
	                            	                        </a>
	                    </div>
	                    <div class="dsq-comment-body" id="dsq-comment-body-2926592613">
	                        <div class="dsq-comment-header">
	                            <span class="dsq-comment-date">2016-09-30</span>
	                            <span class="dsq-commenter-name">weaverryan</span>
	                        </div>

	                        <div id="dsq-comment-message-2926592613" class="dsq-comment-message">
	                            <div id="dsq-comment-text-2926592613" class="dsq-comment-text">
	                                <p>Hey Jim!</p><p>I just saw this message from you :). In general, I think the approach makes sense - it would certainly work, and as you said, the only issues are security (which is a big issue, but at least, an obvious one). But, I don't think Symfony helps you here in any special way - you're still just writing some code that reads some things from the database, executes them, and loads up some status assets that live in the filesystem. That could be done in flat php or any other language. Symfony is just some tools on top of PHP, so it's not giving you any special help here (it has all its normal benefits of giving you organization and tools to make your life easier, but nothing special to your specific situation). So yes, it would come down to trying to figure out security... if you can at all :). If you let people write actual code, then you are going to have security risks. We actually allow this on our site - some of our lessons have coding challenges where you can write PHP and we execute it. This is safe only because we isolate you in a docker instance, and kill that "machine" right after you run your code. It can be done, but it's a tough problem for sure!</p><p>Cheers!</p>
	                            </div>
	                        </div>
	                    </div>
	                </li>
	            	                <li class="dsq-comment dsq-clearfix" data-dsq-comment-id="2926568836" id="dsq-comment-2926568836">
	                    <div class="dsq-avatar dsq-tt">
	                        <a href="https://disqus.com/by/weaverryan/">
	                            	                                <img alt="" src="http://a.disquscdn.com/uploads/users/32/6480/avatar92.jpg?1482356913">
	                            	                        </a>
	                    </div>
	                    <div class="dsq-comment-body" id="dsq-comment-body-2926568836">
	                        <div class="dsq-comment-header">
	                            <span class="dsq-comment-date">2016-09-30</span>
	                            <span class="dsq-commenter-name">weaverryan</span>
	                        </div>

	                        <div id="dsq-comment-message-2926568836" class="dsq-comment-message">
	                            <div id="dsq-comment-text-2926568836" class="dsq-comment-text">
	                                <p>Hi Jim!</p><p>I don't think you're missing anything, but perhaps you're expecting too much :). I would equate Symfony to a set of power tools. It says nothing about what you could build with those power tools or how you should build them (my suggestions so far about a database were just me trying to understand your problem-space and suggest some possible solutions). Actually, technically, Symfony doesn't talk to the database at all - it uses Doctrine (and external tool to do that). So, you can build anything in Symfony, or PHP, or any other language. But, if you think that Symfony might offer you some partially-built solution for your problem space, it definitely won't. Yes, Symfony does have a lot of reusable open source bundles, but your framework sounds quite advanced and quite complex: so that would be complex code. Drupal, on the other hand, is like those same "power tools" plus some high-powered machines that are good at producing certain type of applications more easily. Will something in Drupal be able to give you a head-start, I'm not sure.</p><p>Anyways, I'm happy your enjoying your lessons, and yes, Symfony *can* help you build this, but it won't give you any great step forward for free, but I also doubt that nay other language will either.</p><p>I hope that helps!</p>
	                            </div>
	                        </div>
	                    </div>
	                </li>
	            	                <li class="dsq-comment dsq-clearfix" data-dsq-comment-id="2920857920" id="dsq-comment-2920857920">
	                    <div class="dsq-avatar dsq-tt">
	                        <a href="https://disqus.com/by/jimfuqua/">
	                            	                                <img alt="" src="http://a.disquscdn.com/1479321018/images/noavatar92.png">
	                            	                        </a>
	                    </div>
	                    <div class="dsq-comment-body" id="dsq-comment-body-2920857920">
	                        <div class="dsq-comment-header">
	                            <span class="dsq-comment-date">2016-09-27</span>
	                            <span class="dsq-commenter-name">Jim Fuqua</span>
	                        </div>

	                        <div id="dsq-comment-message-2920857920" class="dsq-comment-message">
	                            <div id="dsq-comment-text-2920857920" class="dsq-comment-text">
	                                <p>Ryan do you think the following approach would work to minimize the use of files?</p><p>1.	Create a bundle in Symfony.  Name the bundle something like “DummyBundle”.<br>2.	Put in the controller for DummyBundle a PHP file that would use some of the PHP commands described in <a href="http://disq.us/url?url=http%3A%2F%2Fphp.net%2Fmanual%2Fen%2Fref.exec.php%3A4MeAxzq4BEPT7d1yyRGYxUvw7AQ&amp;cuid=1175718" rel="nofollow noopener">http://php.net/manual/en/ref.e...</a> to call shell scripts to erase all files in the DummyBundle and recreate the files with contents from the database.<br>3.	The database would have a lesson ID linking a tables containing javascript files; containing twig files;  containing links to SVG files with the SVG files themselves in a separate table; CSS files and a table containing links to png files stored as files on a separate server.</p><p>If this approach could eliminate all lesson bundles stored as files it might be scalable.  Security issues would exist, but lessons are not like money.  If the DummyBundle could be in some sort of sandbox or even the entire Symfony instance in some sort of security sandbox protecting the server it would not make much difference if a person screwed up a lesson.  It would be important that they not hijack the server.</p><p>Would it have a chance?  I may be too old to learn functional programming with Clojure.</p><p>Jim</p>
	                            </div>
	                        </div>
	                    </div>
	                </li>
	            	                <li class="dsq-comment dsq-clearfix" data-dsq-comment-id="2920236630" id="dsq-comment-2920236630">
	                    <div class="dsq-avatar dsq-tt">
	                        <a href="https://disqus.com/by/jimfuqua/">
	                            	                                <img alt="" src="http://a.disquscdn.com/1479321018/images/noavatar92.png">
	                            	                        </a>
	                    </div>
	                    <div class="dsq-comment-body" id="dsq-comment-body-2920236630">
	                        <div class="dsq-comment-header">
	                            <span class="dsq-comment-date">2016-09-27</span>
	                            <span class="dsq-commenter-name">Jim Fuqua</span>
	                        </div>

	                        <div id="dsq-comment-message-2920236630" class="dsq-comment-message">
	                            <div id="dsq-comment-text-2920236630" class="dsq-comment-text">
	                                <p>I don't see how Symfony is putting programs in a "db program table" if they are part of a bundle in javascript files in a js directory which is either in web/ or in a bundle's public/js directory. It appears that they are in files and directories and not in a database.</p><p>It appears that mixing runnable code into and out of a database in PHP might be unusual and difficult. It might be possible with exec(), but would not be the normal course of things.</p><p>Perhaps Clojure or Scheme would be a better fit than PHP.  Clojure and Scheme were designed to mix code and data from the start.  I don't know how good Clojure and Scheme are in serving web pages.</p><p>I don't have large numbers of lessons now, but have been writing what I hoped would be an open-source framework that would allow many people to add lessons easily with great flexibility like blog entries can be easily added to Drupal.  Lessons that teach a single concept can usually be designed, constructed and tested in a few hours, but to be useful they must be storeable, retrievable, organizable and administerable as discrete separate parts with only interaction with a student.</p><p>The problem seems to be that any lesson of any quality will have code and require the user to fill in a blank or drag and drop or click on something with the code reacting to the student input.  A blog entry is internally immutable and does not contain reactive code. A blog entry can be edited by external action but that is not like taking input and automatically grading the input and storing the result of the grading in the database and then automatically going to the next lesson without human involvement.</p><p>I started looking at Drupal and Symfony because as content management systems I thought they could keep everything in a database.  Bundles in directories would probably work for a few hundred pages and perhaps a thousand pages but ultimately is is more unwieldy than database tables.</p><p>A company in Norway, <a href="https://disq.us/url?url=https%3A%2F%2Fh5p.org%3Aze4KYYKzKZ49DSQ9Nbf_tykI15s&amp;cuid=1175718" rel="nofollow noopener">https://h5p.org</a>, is building some great tools to make lessons in Drupal 7, but there are not a lot of open-source lessons.</p><p>Unless there is a Symfony bundle or a Drupal module that will store other functioning bundles or functioning modules in a database instead of directories, I may be pursuing a lost cause trying to create large scale multi-subject teaching tools with Drupal and Symfony.</p><p>What am I missing?  I like Symfony and like your lessons.  Symfony is just fine for static data.  I just don't see how directories and files can store the quantity of dynamic lessons that would be needed for flexibility.</p><p>Jim</p>
	                            </div>
	                        </div>
	                    </div>
	                </li>
	            	                <li class="dsq-comment dsq-clearfix" data-dsq-comment-id="2917713419" id="dsq-comment-2917713419">
	                    <div class="dsq-avatar dsq-tt">
	                        <a href="https://disqus.com/by/weaverryan/">
	                            	                                <img alt="" src="http://a.disquscdn.com/uploads/users/32/6480/avatar92.jpg?1482356913">
	                            	                        </a>
	                    </div>
	                    <div class="dsq-comment-body" id="dsq-comment-body-2917713419">
	                        <div class="dsq-comment-header">
	                            <span class="dsq-comment-date">2016-09-25</span>
	                            <span class="dsq-commenter-name">weaverryan</span>
	                        </div>

	                        <div id="dsq-comment-message-2917713419" class="dsq-comment-message">
	                            <div id="dsq-comment-text-2917713419" class="dsq-comment-text">
	                                <p>Hey Jim!</p><p>Yea, this can be a lot of stuff to learn at once :). It will pay off, but it's not easy! I'm guessing you have already, but just in case you haven't, also check out our OO track: <a href="http://disq.us/url?url=http%3A%2F%2Fknpuniversity.com%2Ftracks%2Foo%3Asw4boefM0VelwXh7c1xT_vJzTvw&amp;cuid=1175718" rel="nofollow noopener">http://knpuniversity.com/track...</a>. And as I always tell people, when you're learning Symfony, you're not really learning Symfony - you're tackling standard skills that'll follow you no matter where find yourself code. I really mean that :).</p><p>Ok, so you mentioned that you ported 2 procedural lessons into Symfony and then mentioned two Twig template files. So, I may not understand your current lessons very well - how does your procedural PHP app work? Do you have the lessons stored in the database somehow? Or are all the 10,000 lessons just individual files or functions somewhere? It sounds *weird* to me so far... so that's why I think I don't understand!</p><p>But, from the little that I know - regardless of what framework or language you use - it seems like you would have a "program" table and a "lesson" table. The "lesson" table would have a program_id foreign key back to the "program" table. Then, every program can have many lessons. You would do something similar with assignments and tests. In Doctrine, these would be a Program entity and a Lesson entity. The Lesson entity would have a ManyToOne relationship back to Program. If a lesson also has related assets, usually you store the filename of the asset (e.g. digram1.png) on a field(s) in the table and then store the asset wherever you want to, which yes, could be as simple as in the web/ directory, but you could also put the Assets up on Amazon's S3.</p><p>Let me know if that helps!</p><p>Cheers!</p>
	                            </div>
	                        </div>
	                    </div>
	                </li>
	            	                <li class="dsq-comment dsq-clearfix" data-dsq-comment-id="2916491487" id="dsq-comment-2916491487">
	                    <div class="dsq-avatar dsq-tt">
	                        <a href="https://disqus.com/by/jimfuqua/">
	                            	                                <img alt="" src="http://a.disquscdn.com/1479321018/images/noavatar92.png">
	                            	                        </a>
	                    </div>
	                    <div class="dsq-comment-body" id="dsq-comment-body-2916491487">
	                        <div class="dsq-comment-header">
	                            <span class="dsq-comment-date">2016-09-24</span>
	                            <span class="dsq-commenter-name">Jim Fuqua</span>
	                        </div>

	                        <div id="dsq-comment-message-2916491487" class="dsq-comment-message">
	                            <div id="dsq-comment-text-2916491487" class="dsq-comment-text">
	                                <p>Thanks Ryan.  I have been enjoying your lessons on Symfony, Twig, Drupal and Doctrine.  My background is straight procedural PHP.  Learning this much simultaneously is quite a task.</p><p>You said “the number of lessons/pages would be something that's stored in the database: as the number of records grow in your database, the size of the container won't increase.”.</p><p>I don’t understand.  I have tried to port some of my procedural PHP lessons into symfony.  I put one in /app/resources/views/left_right/show_left_right.html.twig.  I copied your genus_aqua structure.</p><p>For the other I made a bundle: /src/ClockwiseCounterclockwiseBundle/Resources/views/Default/index.ClockwiseCounterclockwise.html.twig.  These appear to be Directories and files outside any database. This approach won’t scale.  The program would not be manageable with 10,000 lessons that way much less 100,000 all in separate directories and files.</p><p>How do I get them into a database?  I would guess that the ideal way would be for each lesson or group of related lessons to be in a stand-alone bundle with that bundle in a database so that it could be loaded and administered to a student as needed.  The program would be like a machine gun with the lessons like the bullets except that each bullet would be a unique single-concept lesson or small group of lessons related to a single concept.</p><p>Assignments and tests could then be highly flexible database entries themselves and not closely coupled to other lessons or the administering program.  Storing assets for all lessons in web/ seems to be the epitome of content coupling that is partially but not fully cured with Assetic.</p><p>Thank you for sharing your deep knowledge of Symfony.  It would be unfortunate to spend a lot of time learning something that is unsuited to the task. Hopefully Symfony is flexible enough to make lessons decoupled data at times and integral parts of the program only when needed.</p><p>Jim</p>
	                            </div>
	                        </div>
	                    </div>
	                </li>
	            	                <li class="dsq-comment dsq-clearfix" data-dsq-comment-id="2915058943" id="dsq-comment-2915058943">
	                    <div class="dsq-avatar dsq-tt">
	                        <a href="https://disqus.com/by/weaverryan/">
	                            	                                <img alt="" src="http://a.disquscdn.com/uploads/users/32/6480/avatar92.jpg?1482356913">
	                            	                        </a>
	                    </div>
	                    <div class="dsq-comment-body" id="dsq-comment-body-2915058943">
	                        <div class="dsq-comment-header">
	                            <span class="dsq-comment-date">2016-09-23</span>
	                            <span class="dsq-commenter-name">weaverryan</span>
	                        </div>

	                        <div id="dsq-comment-message-2915058943" class="dsq-comment-message">
	                            <div id="dsq-comment-text-2915058943" class="dsq-comment-text">
	                                <p>Hi Jim!</p><p>Fortunately, the container and the number of lessons/pages end up being two different ideas :). The container will simply hold all of your useful objects in one convenient place. To give a rough, but basically accurate analogy, your container will grow as the amount of actual PHP code in your application grows. And, for the most part (and by design) the container can grow very large without having any performance impact. On the other hand, the number of lessons/pages would be something that's stored in the database: as the number of records grow in your database, the size of the container won't increase. So, the limitations or performance impacts from storing *many* lessons are just those of your database and how you write the code that interacts with it (e.g. obviously if you tried to load 10k lessons at once and render them on one page, that'll be slow).</p><p>It sounds like you're coming from a Drupal background? If so, the Entity framework that's used to load data has improved, but hasn't changed *all* that much. If you are (or aren't) having problems with these many records in Drupal 7, then you equally will (or will not) have problems in Drupal 8.</p><p>Let me know if that helps!</p><p>Cheers!</p>
	                            </div>
	                        </div>
	                    </div>
	                </li>
	            	                <li class="dsq-comment dsq-clearfix" data-dsq-comment-id="2914692612" id="dsq-comment-2914692612">
	                    <div class="dsq-avatar dsq-tt">
	                        <a href="https://disqus.com/by/jimfuqua/">
	                            	                                <img alt="" src="http://a.disquscdn.com/1479321018/images/noavatar92.png">
	                            	                        </a>
	                    </div>
	                    <div class="dsq-comment-body" id="dsq-comment-body-2914692612">
	                        <div class="dsq-comment-header">
	                            <span class="dsq-comment-date">2016-09-23</span>
	                            <span class="dsq-commenter-name">Jim Fuqua</span>
	                        </div>

	                        <div id="dsq-comment-message-2914692612" class="dsq-comment-message">
	                            <div id="dsq-comment-text-2914692612" class="dsq-comment-text">
	                                <p>What about the capacity of such containers? For an educational program where the contents of the container are finite single-concept single-page lessons could Symfony or Drupal handle 10,000 or even 100,000 lessons/pages?  How do they scale? Multiple lessons in one container or multiple lessons per container and multiple containers?  Practical limits? All of K-12 public school lessons/concepts could approach or exceed 1,000,000 in 13 years of school.</p>
	                            </div>
	                        </div>
	                    </div>
	                </li>
	            	                <li class="dsq-comment dsq-clearfix" data-dsq-comment-id="2479120559" id="dsq-comment-2479120559">
	                    <div class="dsq-avatar dsq-tt">
	                        <a href="https://disqus.com/by/weaverryan/">
	                            	                                <img alt="" src="http://a.disquscdn.com/uploads/users/32/6480/avatar92.jpg?1482356913">
	                            	                        </a>
	                    </div>
	                    <div class="dsq-comment-body" id="dsq-comment-body-2479120559">
	                        <div class="dsq-comment-header">
	                            <span class="dsq-comment-date">2016-01-26</span>
	                            <span class="dsq-commenter-name">weaverryan</span>
	                        </div>

	                        <div id="dsq-comment-message-2479120559" class="dsq-comment-message">
	                            <div id="dsq-comment-text-2479120559" class="dsq-comment-text">
	                                <p>It is a good practice :). Well, specifically, you should unit test everything you can... but sometimes it's just good to do a quick functional/integration test that actually boots the kernel to make sure everything is wired together correctly. Here's an example from one of my bundles: <a href="https://disq.us/url?url=https%3A%2F%2Fgithub.com%2Fknpuniversity%2Foauth2-client-bundle%2Fblob%2Fmaster%2FTests%2FFunctionalTest.php%3AjmhXIO9bmD9SHPDn3iSShz5fEhQ&amp;cuid=1175718" rel="nofollow noopener">https://github.com/knpuniversi...</a>, which uses this kernel: <a href="https://disq.us/url?url=https%3A%2F%2Fgithub.com%2Fknpuniversity%2Foauth2-client-bundle%2Fblob%2Fmaster%2FTests%2Fapp%2FTestKernel.php%3ASnQSB07NogFxeaDqaqx5A7ez4GQ&amp;cuid=1175718" rel="nofollow noopener">https://github.com/knpuniversi...</a>.</p><p>Cheers!</p>
	                            </div>
	                        </div>
	                    </div>
	                </li>
	            	                <li class="dsq-comment dsq-clearfix" data-dsq-comment-id="2469744267" id="dsq-comment-2469744267">
	                    <div class="dsq-avatar dsq-tt">
	                        <a href="resume">
	                            	                                <img alt="" src="http://a.disquscdn.com/1479321018/images/noavatar92.png">
	                            	                        </a>
	                    </div>
	                    <div class="dsq-comment-body" id="dsq-comment-body-2469744267">
	                        <div class="dsq-comment-header">
	                            <span class="dsq-comment-date">2016-01-21</span>
	                            <span class="dsq-commenter-name">damdoudidam</span>
	                        </div>

	                        <div id="dsq-comment-message-2469744267" class="dsq-comment-message">
	                            <div id="dsq-comment-text-2469744267" class="dsq-comment-text">
	                                <p>Thanks for your comment. I finally mock it before your response. This is the good way for test my extension. But I'm keeping by my side this trick of KernelTestCase. I did this way (with a kernel) for create an empty application in my bundle to allow people to test<br>  it (manually or automatically) outside of an actual application. But I don't know if it's a good practice...</p>
	                            </div>
	                        </div>
	                    </div>
	                </li>
	            	                <li class="dsq-comment dsq-clearfix" data-dsq-comment-id="2468223014" id="dsq-comment-2468223014">
	                    <div class="dsq-avatar dsq-tt">
	                        <a href="https://disqus.com/by/weaverryan/">
	                            	                                <img alt="" src="http://a.disquscdn.com/uploads/users/32/6480/avatar92.jpg?1482356913">
	                            	                        </a>
	                    </div>
	                    <div class="dsq-comment-body" id="dsq-comment-body-2468223014">
	                        <div class="dsq-comment-header">
	                            <span class="dsq-comment-date">2016-01-20</span>
	                            <span class="dsq-commenter-name">weaverryan</span>
	                        </div>

	                        <div id="dsq-comment-message-2468223014" class="dsq-comment-message">
	                            <div id="dsq-comment-text-2468223014" class="dsq-comment-text">
	                                <p>Hey, thanks!</p><p>Your setup for creating the "test" kernel is correct :). Actually, I often use Symfony's KernelTestCase as a base class for my tests. Then you can simply say:</p><p></p><pre><code><br>self::bootKernel();<br>$container = self::$kernel-&gt;getContainer();<br></code></pre><p></p><p>But really, it's the same thing. About your questions, why and where are you calling $extension-&gt;load()? Are you trying to test your extension class? If so, you do *not* need to create the kernel like my code above (or your code). That container is a fully-built, finished Container. If you want to test your extension class, simply create a new ContainerBuilder (or mock it) and pass that in:</p><p></p><pre>$builder = new ContainerBuilder();<br>$extension-&gt;load($configs, $builder);<br></pre><p></p><p>Cheers!</p>
	                            </div>
	                        </div>
	                    </div>
	                </li>
	            	                <li class="dsq-comment dsq-clearfix" data-dsq-comment-id="2467953658" id="dsq-comment-2467953658">
	                    <div class="dsq-avatar dsq-tt">
	                        <a href="resume">
	                            	                                <img alt="" src="http://a.disquscdn.com/1479321018/images/noavatar92.png">
	                            	                        </a>
	                    </div>
	                    <div class="dsq-comment-body" id="dsq-comment-body-2467953658">
	                        <div class="dsq-comment-header">
	                            <span class="dsq-comment-date">2016-01-20</span>
	                            <span class="dsq-commenter-name">damdoudidam</span>
	                        </div>

	                        <div id="dsq-comment-message-2467953658" class="dsq-comment-message">
	                            <div id="dsq-comment-text-2467953658" class="dsq-comment-text">
	                                <p>Hi, great tutorial !</p><p>I have a question : I want to add a standalone kernel for unit testing in a bundle. When in setUp function I do :</p><p>$kernel = new AppKernel('test', true);</p><p>$kernel-&gt;boot();</p><p>$container = $kernel-&gt;getContainer();</p><p>I have a appTestDebugProjectContainer instance for $container and now I understand why. But for example, Symfony wants ContainerBuilder instance when we call $extension-&gt;load(array $configs, ContainerBuilder $container). So Symfony kick me out. How can I fix this ?</p>
	                            </div>
	                        </div>
	                    </div>
	                </li>
	            	                <li class="dsq-comment dsq-clearfix" data-dsq-comment-id="2269198237" id="dsq-comment-2269198237">
	                    <div class="dsq-avatar dsq-tt">
	                        <a href="https://disqus.com/by/julestruong/">
	                            	                                <img alt="" src="http://a.disquscdn.com/uploads/users/17589/8488/avatar92.jpg?1460642748">
	                            	                        </a>
	                    </div>
	                    <div class="dsq-comment-body" id="dsq-comment-body-2269198237">
	                        <div class="dsq-comment-header">
	                            <span class="dsq-comment-date">2015-09-23</span>
	                            <span class="dsq-commenter-name">Jules Truong</span>
	                        </div>

	                        <div id="dsq-comment-message-2269198237" class="dsq-comment-message">
	                            <div id="dsq-comment-text-2269198237" class="dsq-comment-text">
	                                <p>Awesome tutorial as the first one was. Congrats here !</p>
	                            </div>
	                        </div>
	                    </div>
	                </li>
	            	                <li class="dsq-comment dsq-clearfix" data-dsq-comment-id="2075202833" id="dsq-comment-2075202833">
	                    <div class="dsq-avatar dsq-tt">
	                        <a href="https://disqus.com/by/shairyarbaig/">
	                            	                                <img alt="" src="http://a.disquscdn.com/uploads/users/10592/9062/avatar92.jpg?1469787361">
	                            	                        </a>
	                    </div>
	                    <div class="dsq-comment-body" id="dsq-comment-body-2075202833">
	                        <div class="dsq-comment-header">
	                            <span class="dsq-comment-date">2015-06-12</span>
	                            <span class="dsq-commenter-name">Shairyar Baig</span>
	                        </div>

	                        <div id="dsq-comment-message-2075202833" class="dsq-comment-message">
	                            <div id="dsq-comment-text-2075202833" class="dsq-comment-text">
	                                <p>I am starting to get my head around the Service and The Dependency Injection after watching this tutorial but still a long way to go, may be when you guys get time try to create a tutorial that includes real life examples.</p>
	                            </div>
	                        </div>
	                    </div>
	                </li>
	            	        </ul>
	    </div>
            </div>

    <script type="text/javascript">
    var disqus_shortname = 'knpuniversity';
    var disqus_container_id = 'disqus_thread';var disqus_developer = 1;var disqus_identifier = 'course_59';var disqus_url = 'http://knpuniversity.com/screencast/symfony-journey-di';var disqus_config = function () {};

    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>

                            </div>
        </div>
    </div>

<footer class="footer footer-styling">
    <div class="container">
        <div class="row">
                        <div class="col-xs-7 col-sm-4">
                <div class="row">
                    <div class="col-xs-6">
                        <ul class="list-unstyled footer-link">
                            <li><a class="knp-color-black" href="../../courses/all">All Courses</a></li>
                                                            <li><a class="knp-color-black" href="../../pricing.1">Pricing</a></li>
                                                        <li><a class="knp-color-black" href="../../faq">FAQ</a></li>
                            <li><a class="knp-color-black" href="../../training">Training</a></li>
                        </ul>
                    </div>
                    <div class="col-xs-6">
                        <ul class="list-unstyled footer-link">
                            <li><a class="knp-color-black" href="../../about">About</a></li>
                            <li><a class="knp-color-black" href="../../blog">Blog</a></li>
                            <li><a class="knp-color-black" href="../../contact">Contact Us</a></li>
                            <li>
                                <a class="knp-color-black" href="../../terms">Terms</a>
                                <span class="knp-color-black">&amp;</span>
                                <a class="knp-color-black" href="../../privacy">Privacy</a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
            <div class="hidden-xs col-sm-4">
                <p class="disclaimer">Symfony is a registered trademark of Fabien Potencier in the United States and/or other countries.
                This product is not endorsed or sponsored by Fabien Potencier.
                </p>
            </div>
            <div class="col-xs-5 col-sm-4">
                <div class="social-icons">
                    <a class="btn btn-social-icon btn-twitter" href="https://twitter.com/KnpUniversity">
                        <i class="fa fa-twitter"></i>
                    </a>
                    <a class="btn btn-social-icon btn-facebook" href="https://www.facebook.com/KnpLabs/">
                        <i class="fa fa-facebook"></i>
                    </a>
                    <a class="btn btn-social-icon btn-github" href="https://github.com/knpuniversity">
                        <i class="fa fa-github"></i>
                    </a>
                </div>
            </div>
                    </div>
    </div>
</footer>

<!-- JS -->
        <script>
        Core.analyticsVideoStatsUrl = '/api/analytics/video/duration';
    </script>

            <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>

        <script type="text/javascript">
        var _gaq = _gaq || [];
        _gaq.push(['_setAccount', 'UA-7062980-20']);
        _gaq.push(['_trackPageview']);
    </script>
    <script>
    
    </script>
    
    <script type="text/javascript">
        (function() {
            var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
            ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
            var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
        })();
    </script>
    
                <script type="text/javascript">
      (function() {
        var uv = document.createElement('script'); uv.type = 'text/javascript'; uv.async = true;
        uv.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + 'widget.uservoice.com/pOay2WLVabhXiEffbarO6Q.js';
        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(uv, s);
      })();

      UserVoice = window.UserVoice || [];
      UserVoice.push(['showTab', 'classic_widget', {
          tab_position: 'bottom-right',
          tab_label: 'Ideas or Feedback?',
          tab_color: '#005E8E'
      }]);
    </script>
        
            
        <script type="text/javascript">
    var _sf_async_config={uid:54262,domain:"knpuniversity.com",useCanonical:true};
    (function(){
      function loadChartbeat() {
        window._sf_endpt=(new Date()).getTime();
        var e = document.createElement('script');
        e.setAttribute('language', 'javascript');
        e.setAttribute('type', 'text/javascript');
        e.setAttribute('src', '//static.chartbeat.com/js/chartbeat.js');
        document.body.appendChild(e);
      }
      var oldonload = window.onload;
      window.onload = (typeof window.onload != 'function') ?
         loadChartbeat : function() { oldonload(); loadChartbeat(); };
    })();
    </script>
    
            <script>
            (function(){
                var t,i,e,n=window,o=document,a=arguments,s="script",r=["config","track","identify","visit","push","call"],c=function(){var t,i=this;for(i._e=[],t=0;r.length>t;t++)(function(t){i[t]=function(){return i._e.push([t].concat(Array.prototype.slice.call(arguments,0))),i}})(r[t])};for(n._w=n._w||{},t=0;a.length>t;t++)n._w[a[t]]=n[a[t]]=n[a[t]]||new c;i=o.createElement(s),i.async=1,i.src="//static.woopra.com/js/w.js",e=o.getElementsByTagName(s)[0],e.parentNode.insertBefore(i,e)
            })("woopra");

            woopra.config({
                domain: 'knpuniversity.com',
                download_tracking: true,
                outgoing_tracking: true
            });

                            woopra.identify({
                    userType: 'anonymous',
                    hasSubscription: 'no'
                });
                    </script>

        <script>
            woopra.track(
            'course_view_dashboard',
            {"course":"symfony-journey-di"}
        );
    </script>

        <script>
            woopra.track();
        </script>
     
        <script type="text/javascript">
    var _qevents = _qevents || [];

    (function() {
    var elem = document.createElement('script');
    elem.src = (document.location.protocol == "https:" ? "https://secure" : "http://edge") + ".quantserve.com/quant.js";
    elem.async = true;
    elem.type = "text/javascript";
    var scpt = document.getElementsByTagName('script')[0];
    scpt.parentNode.insertBefore(elem, scpt);
    })();

    _qevents.push({
    qacct:"p-8-SEHS37bhSQ0"
    });
    </script>

    <noscript>
    <div style="display:none;">
    <img src="http://pixel.quantserve.com/pixel/p-8-SEHS37bhSQ0.gif" border="0" height="1" width="1" alt="Quantcast"/>
    </div>
    </noscript>
    


    <script type="text/javascript" src="../../js/CourseNotification.js"></script>

    <script>
        jQuery(document).ready(function() {
            var courseNotification = new Core.CourseNotification($('#course-subscription-wrapper'));

            // Highlight related courses when page is loaded
            var relatedCourseItems = jQuery('.related-courses').find('li');
            var courseChapterItems = jQuery('.chapter-list').find('li');
            // Event listeners
            jQuery(window).on('hashchange', function() {
                // Highlight related courses on every hash change:
                // it allows to avoid page reloading after each change,
                // useful for debugging :)
                highlightItems('C', relatedCourseItems);
                highlightItems('CH', courseChapterItems);
            });
            highlightItems('C', relatedCourseItems);
            highlightItems('CH', courseChapterItems);

            /**
             * Highlight specified items on overview course page like GitHub highlights code lines.
             * Enumerate course ordinal numbers in list with comma using URI hash like "#C:1,4,5".
             * Supported keys:
             * - "C" for related courses
             * - "CH" for course chapters
             *
             * For example, in order to highlight 1st, 4th and 5th course chapte items use:
             * http://knpu.l/screencast/php#CH:1,4,5
             */
            function highlightItems(key, jQueryListItems)
            {
                // Reset all highlighted before items
                jQueryListItems.removeClass('highlighted-bg');
                if (!key) {
                    return;
                }

                var hash = window.location.hash;
                var pattern = new RegExp('^#'+key+':([0-9]+(,[0-9]+)*)');
                if (0 === hash.search(pattern)) {
                    // Try to match at least one item index in hash
                    // and handle highlighting only if it found
                    var matches = hash.match(pattern);
                    var itemIndexEnumeration = matches[1];
                    if (itemIndexEnumeration) {
                        var itemIndexArray = itemIndexEnumeration.split(',');
                        itemIndexArray.forEach(function (value) {
                            var index = value - 1; // normalize index based on order number
                            jQueryListItems
                                    .filter(':eq(' + index + ')')
                                    .addClass('highlighted-bg');
                        });

                        // Find the first highlighted item and scroll to it
                        var minIndex = Math.min.apply(Math, itemIndexArray) - 1;
                        jQuery.smoothScroll({
                            scrollTarget: jQueryListItems.filter(':eq(' + minIndex + ')')
                        });
                    }
                }
            }
        });
    </script>
<script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"beacon":"bam.nr-data.net","licenseKey":"b4d8035b34","applicationID":"3720092","transactionName":"MgEBMkZVXBFXBRENWwtLIgVAXV0MGQ0LFGsQCgoQUUZBC0IfOgdbEBYQA2tHWg1B","queueTime":0,"applicationTime":233,"atts":"HkYCRA5PTx8=","errorBeacon":"bam.nr-data.net","agent":""}</script></body>
</html>
